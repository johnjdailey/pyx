<!doctype html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />

    <title>pyx.php API documentation</title>
    <meta name="description" content="Run Converted PHP Codes in Python with the Speed of Compiled-C
-------------------------------------..." />

  <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300' rel='stylesheet' type='text/css'>
  
  <style type="text/css">
  
* {
  box-sizing: border-box;
}
/*! normalize.css v1.1.1 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */

[hidden] {
    display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */

/**
 * 1. Prevent system color scheme's background color being used in Firefox, IE,
 *    and Opera.
 * 2. Prevent system color scheme's text color being used in Firefox, IE, and
 *    Opera.
 * 3. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 4. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    background: #fff; /* 1 */
    color: #000; /* 2 */
    font-size: 100%; /* 3 */
    -webkit-text-size-adjust: 100%; /* 4 */
    -ms-text-size-adjust: 100%; /* 4 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */

html,
button,
input,
select,
textarea {
    font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */

body {
    margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */

/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */

h1 {
    font-size: 2em;
    margin: 0.67em 0;
}

h2 {
    font-size: 1.5em;
    margin: 0.83em 0;
}

h3 {
    font-size: 1.17em;
    margin: 1em 0;
}

h4 {
    font-size: 1em;
    margin: 1.33em 0;
}

h5 {
    font-size: 0.83em;
    margin: 1.67em 0;
}

h6 {
    font-size: 0.67em;
    margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

blockquote {
    margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */

dfn {
    font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */

hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */

mark {
    background: #ff0;
    color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */

p,
pre {
    margin: 1em 0;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */

pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */

q {
    quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */

q:before,
q:after {
    content: '';
    content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */

/**
 * Address margins set differently in IE 6/7.
 */

dl,
menu,
ol,
ul {
    margin: 1em 0;
}

dd {
    margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */

menu,
ol,
ul {
    padding: 0 0 0 40px;
}

/**
 * Correct list images handled incorrectly in IE 7.
 */

nav ul,
nav ol {
    list-style: none;
    list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */

img {
    border: 0; /* 1 */
    -ms-interpolation-mode: bicubic; /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */

svg:not(:root) {
    overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */

figure {
    margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */

/**
 * Correct margin displayed oddly in IE 6/7.
 */

form {
    margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */

legend {
    border: 0; /* 1 */
    padding: 0;
    white-space: normal; /* 2 */
    *margin-left: -7px; /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */

button,
input,
select,
textarea {
    font-size: 100%; /* 1 */
    margin: 0; /* 2 */
    vertical-align: baseline; /* 3 */
    *vertical-align: middle; /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
    *overflow: visible;  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
    *height: 13px; /* 3 */
    *width: 13px; /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

  </style>

  <style type="text/css">
  
  html, body {
    margin: 0;
    padding: 0;
    min-height: 100%;
  }
  body {
    background: #fff;
    font-family: "Source Sans Pro", "Helvetica Neueue", Helvetica, sans;
    font-weight: 300;
    font-size: 16px;
    line-height: 1.6em;
  }
  #content {
    width: 70%;
    max-width: 850px;
    float: left;
    padding: 30px 60px;
    border-left: 1px solid #ddd;
  }
  #sidebar {
    width: 25%;
    float: left;
    padding: 30px;
    overflow: hidden;
  }
  #nav {
    font-size: 130%;
    margin: 0 0 15px 0;
  }

  #top {
    display: block;
    position: fixed;
    bottom: 5px;
    left: 5px;
    font-size: .85em;
    text-transform: uppercase;
  }

  #footer {
    font-size: .75em;
    padding: 5px 30px;
    border-top: 1px solid #ddd;
    text-align: right;
  }
    #footer p {
      margin: 0 0 0 30px;
      display: inline-block;
    }

  h1, h2, h3, h4, h5 {
    font-weight: 300;
  }
  h1 {
    font-size: 2.5em;
    line-height: 1.1em;
    margin: 0 0 .50em 0;
  }

  h2 {
    font-size: 1.75em;
    margin: 1em 0 .50em 0;
  }

  h3 {
    margin: 25px 0 10px 0;
  }

  h4 {
    margin: 0;
    font-size: 105%;
  }

  a {
    color: #058;
    text-decoration: none;
    transition: color .3s ease-in-out;
  }

  a:hover {
    color: #e08524;
    transition: color .3s ease-in-out;
  }

  pre, code, .mono, .name {
    font-family: "Ubuntu Mono", "Cousine", "DejaVu Sans Mono", monospace;
  }

  .title .name {
    font-weight: bold;
  }
  .section-title {
    margin-top: 2em;
  }
  .ident {
    color: #900;
  }

  code {
    background: #f9f9f9;
  } 

  pre {
    background: #fefefe;
    border: 1px solid #ddd;
    box-shadow: 2px 2px 0 #f3f3f3;
    margin: 0 30px;
    padding: 15px 30px;
  }

  .codehilite {
    margin: 0 30px 10px 30px;
  }

    .codehilite pre {
      margin: 0;
    }
    .codehilite .err { background: #ff3300; color: #fff !important; } 

  table#module-list {
    font-size: 110%;
  }

    table#module-list tr td:first-child {
      padding-right: 10px;
      white-space: nowrap;
    }

    table#module-list td {
      vertical-align: top;
      padding-bottom: 8px;
    }

      table#module-list td p {
        margin: 0 0 7px 0;
      }

  .def {
    display: table;
  }

    .def p {
      display: table-cell;
      vertical-align: top;
      text-align: left;
    }

    .def p:first-child {
      white-space: nowrap;
    }

    .def p:last-child {
      width: 100%;
    }


  #index {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
    ul#index .class_name {
      /* font-size: 110%; */
      font-weight: bold;
    }
    #index ul {
      margin: 0;
    }

  .item {
    margin: 0 0 15px 0;
  }

    .item .class {
      margin: 0 0 25px 30px;
    }

      .item .class ul.class_list {
        margin: 0 0 20px 0;
      }

    .item .name {
      background: #fafafa;
      margin: 0;
      font-weight: bold;
      padding: 5px 10px;
      border-radius: 3px;
      display: inline-block;
      min-width: 40%;
    }
      .item .name:hover {
        background: #f6f6f6;
      }

    .item .empty_desc {
      margin: 0 0 5px 0;
      padding: 0;
    }

    .item .inheritance {
      margin: 3px 0 0 30px;
    }

    .item .inherited {
      color: #666;
    }

    .item .desc {
      padding: 0 8px;
      margin: 0;
    }

      .item .desc p {
        margin: 0 0 10px 0;
      }

    .source_cont {
      margin: 0;
      padding: 0;
    }

    .source_link a {
      background: #ffc300;
      font-weight: 400;
      font-size: .75em;
      text-transform: uppercase;
      color: #fff;
      text-shadow: 1px 1px 0 #f4b700;
      
      padding: 3px 8px;
      border-radius: 2px;
      transition: background .3s ease-in-out;
    }
      .source_link a:hover {
        background: #FF7200;
        text-shadow: none;
        transition: background .3s ease-in-out;
      }

    .source {
      display: none;
      max-height: 600px;
      overflow-y: scroll;
      margin-bottom: 15px;
    }

      .source .codehilite {
        margin: 0;
      }

  .desc h1, .desc h2, .desc h3 {
    font-size: 100% !important;
  }
  .clear {
    clear: both;
  }

  @media all and (max-width: 950px) {
    #sidebar {
      width: 35%;
    }
    #content {
      width: 65%;
    }
  }
  @media all and (max-width: 650px) {
    #top {
      display: none;
    }
    #sidebar {
      float: none;
      width: auto;
    }
    #content {
      float: none;
      width: auto;
      padding: 30px;
    }

    #index ul {
      padding: 0;
      margin-bottom: 15px;
    }
    #index ul li {
      display: inline-block;
      margin-right: 30px;
    }
    #footer {
      text-align: left;
    }
    #footer p {
      display: block;
      margin: inherit;
    }
  }

  /*****************************/

  </style>

  <style type="text/css">
  .codehilite .hll { background-color: #ffffcc }
.codehilite  { background: #f8f8f8; }
.codehilite .c { color: #408080; font-style: italic } /* Comment */
.codehilite .err { border: 1px solid #FF0000 } /* Error */
.codehilite .k { color: #008000; font-weight: bold } /* Keyword */
.codehilite .o { color: #666666 } /* Operator */
.codehilite .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
.codehilite .cm { color: #408080; font-style: italic } /* Comment.Multiline */
.codehilite .cp { color: #BC7A00 } /* Comment.Preproc */
.codehilite .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
.codehilite .c1 { color: #408080; font-style: italic } /* Comment.Single */
.codehilite .cs { color: #408080; font-style: italic } /* Comment.Special */
.codehilite .gd { color: #A00000 } /* Generic.Deleted */
.codehilite .ge { font-style: italic } /* Generic.Emph */
.codehilite .gr { color: #FF0000 } /* Generic.Error */
.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.codehilite .gi { color: #00A000 } /* Generic.Inserted */
.codehilite .go { color: #888888 } /* Generic.Output */
.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.codehilite .gs { font-weight: bold } /* Generic.Strong */
.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.codehilite .gt { color: #0044DD } /* Generic.Traceback */
.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.codehilite .kp { color: #008000 } /* Keyword.Pseudo */
.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.codehilite .kt { color: #B00040 } /* Keyword.Type */
.codehilite .m { color: #666666 } /* Literal.Number */
.codehilite .s { color: #BA2121 } /* Literal.String */
.codehilite .na { color: #7D9029 } /* Name.Attribute */
.codehilite .nb { color: #008000 } /* Name.Builtin */
.codehilite .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.codehilite .no { color: #880000 } /* Name.Constant */
.codehilite .nd { color: #AA22FF } /* Name.Decorator */
.codehilite .ni { color: #999999; font-weight: bold } /* Name.Entity */
.codehilite .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.codehilite .nf { color: #0000FF } /* Name.Function */
.codehilite .nl { color: #A0A000 } /* Name.Label */
.codehilite .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */
.codehilite .nv { color: #19177C } /* Name.Variable */
.codehilite .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.codehilite .w { color: #bbbbbb } /* Text.Whitespace */
.codehilite .mb { color: #666666 } /* Literal.Number.Bin */
.codehilite .mf { color: #666666 } /* Literal.Number.Float */
.codehilite .mh { color: #666666 } /* Literal.Number.Hex */
.codehilite .mi { color: #666666 } /* Literal.Number.Integer */
.codehilite .mo { color: #666666 } /* Literal.Number.Oct */
.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */
.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */
.codehilite .sc { color: #BA2121 } /* Literal.String.Char */
.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */
.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */
.codehilite .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */
.codehilite .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.codehilite .sx { color: #008000 } /* Literal.String.Other */
.codehilite .sr { color: #BB6688 } /* Literal.String.Regex */
.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */
.codehilite .ss { color: #19177C } /* Literal.String.Symbol */
.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */
.codehilite .fm { color: #0000FF } /* Name.Function.Magic */
.codehilite .vc { color: #19177C } /* Name.Variable.Class */
.codehilite .vg { color: #19177C } /* Name.Variable.Global */
.codehilite .vi { color: #19177C } /* Name.Variable.Instance */
.codehilite .vm { color: #19177C } /* Name.Variable.Magic */
.codehilite .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

  <style type="text/css">
  
/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
    /* Style adjustments for viewports that meet the condition */
}

@media print,
       (-o-min-device-pixel-ratio: 5/4),
       (-webkit-min-device-pixel-ratio: 1.25),
       (min-resolution: 120dpi) {
    /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    /*
     * Don't show links for images, or javascript/internal links
     */

    .ir a:after,
    a[href^="javascript:"]:after,
    a[href^="#"]:after {
        content: "";
    }

    pre,
    blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }
}

  </style>

  <script type="text/javascript">
  function toggle(id, $link) {
    $node = document.getElementById(id);
    if (!$node)
    return;
    if (!$node.style.display || $node.style.display == 'none') {
    $node.style.display = 'block';
    $link.innerHTML = 'Hide source &nequiv;';
    } else {
    $node.style.display = 'none';
    $link.innerHTML = 'Show source &equiv;';
    }
  }
  </script>
</head>
<body>
<a href="#" id="top">Top</a>

<div id="container">
    
  
  <div id="sidebar">
    <h1>Index</h1>
    <ul id="index">

    <li class="set"><h3><a href="#header-classes">Classes</a></h3>
      <ul>
        <li class="mono">
        <span class="class_name"><a href="#pyx.php.array">array</a></span>
        
          
  <ul>
    <li class="mono"><a href="#pyx.php.array.__init__">__init__</a></li>
    <li class="mono"><a href="#pyx.php.array.__add__">__add__</a></li>
    <li class="mono"><a href="#pyx.php.array.__contains__">__contains__</a></li>
    <li class="mono"><a href="#pyx.php.array.__delitem__">__delitem__</a></li>
    <li class="mono"><a href="#pyx.php.array.__getitem__">__getitem__</a></li>
    <li class="mono"><a href="#pyx.php.array.__iter__">__iter__</a></li>
    <li class="mono"><a href="#pyx.php.array.__len__">__len__</a></li>
    <li class="mono"><a href="#pyx.php.array.__next__">__next__</a></li>
    <li class="mono"><a href="#pyx.php.array.__repr__">__repr__</a></li>
    <li class="mono"><a href="#pyx.php.array.__setitem__">__setitem__</a></li>
    <li class="mono"><a href="#pyx.php.array._repr_body">_repr_body</a></li>
    <li class="mono"><a href="#pyx.php.array.append">append</a></li>
    <li class="mono"><a href="#pyx.php.array.clear">clear</a></li>
    <li class="mono"><a href="#pyx.php.array.compare">compare</a></li>
    <li class="mono"><a href="#pyx.php.array.copy">copy</a></li>
    <li class="mono"><a href="#pyx.php.array.current">current</a></li>
    <li class="mono"><a href="#pyx.php.array.end">end</a></li>
    <li class="mono"><a href="#pyx.php.array.extend">extend</a></li>
    <li class="mono"><a href="#pyx.php.array.fromkeys">fromkeys</a></li>
    <li class="mono"><a href="#pyx.php.array.get">get</a></li>
    <li class="mono"><a href="#pyx.php.array.getkeys">getkeys</a></li>
    <li class="mono"><a href="#pyx.php.array.items">items</a></li>
    <li class="mono"><a href="#pyx.php.array.keys">keys</a></li>
    <li class="mono"><a href="#pyx.php.array.next">next</a></li>
    <li class="mono"><a href="#pyx.php.array.pop">pop</a></li>
    <li class="mono"><a href="#pyx.php.array.pop_return_default_if_key_not_found">pop_return_default_if_key_not_found</a></li>
    <li class="mono"><a href="#pyx.php.array.popitem">popitem</a></li>
    <li class="mono"><a href="#pyx.php.array.prev">prev</a></li>
    <li class="mono"><a href="#pyx.php.array.push">push</a></li>
    <li class="mono"><a href="#pyx.php.array.reindex">reindex</a></li>
    <li class="mono"><a href="#pyx.php.array.rename">rename</a></li>
    <li class="mono"><a href="#pyx.php.array.reset">reset</a></li>
    <li class="mono"><a href="#pyx.php.array.setdefault">setdefault</a></li>
    <li class="mono"><a href="#pyx.php.array.update">update</a></li>
    <li class="mono"><a href="#pyx.php.array.values">values</a></li>
  </ul>

        </li>
        <li class="mono">
        <span class="class_name"><a href="#pyx.php.ConstCls">ConstCls</a></span>
        
        </li>
        <li class="mono">
        <span class="class_name"><a href="#pyx.php.OrderedDict">ODict</a></span>
        
        </li>
        <li class="mono">
        <span class="class_name"><a href="#pyx.php.stdClass">stdClass</a></span>
        
          
  <ul>
    <li class="mono"><a href="#pyx.php.stdClass.__init__">__init__</a></li>
    <li class="mono"><a href="#pyx.php.stdClass.IniObj">IniObj</a></li>
  </ul>

        </li>
        <li class="mono">
        <span class="class_name"><a href="#pyx.php.Switcher">Switcher</a></span>
        
          
  <ul>
    <li class="mono"><a href="#pyx.php.Switcher.number_0">number_0</a></li>
    <li class="mono"><a href="#pyx.php.Switcher.number_1">number_1</a></li>
    <li class="mono"><a href="#pyx.php.Switcher.number_2">number_2</a></li>
    <li class="mono"><a href="#pyx.php.Switcher.numbers_to_methods_to_strings">numbers_to_methods_to_strings</a></li>
  </ul>

        </li>
      </ul>
    </li>


    <li class="set"><h3><a href="#header-functions">Functions</a></h3>
      
  <ul>
    <li class="mono"><a href="#pyx.php.abs">abs</a></li>
    <li class="mono"><a href="#pyx.php.absint">absint</a></li>
    <li class="mono"><a href="#pyx.php.acos">acos</a></li>
    <li class="mono"><a href="#pyx.php.acosh">acosh</a></li>
    <li class="mono"><a href="#pyx.php.addslashes">addslashes</a></li>
    <li class="mono"><a href="#pyx.php.addslashes_slow">addslashes_slow</a></li>
    <li class="mono"><a href="#pyx.php.Array">Array</a></li>
    <li class="mono"><a href="#pyx.php.array_change_key_case">array_change_key_case</a></li>
    <li class="mono"><a href="#pyx.php.array_diff">array_diff</a></li>
    <li class="mono"><a href="#pyx.php.array_fill_keys">array_fill_keys</a></li>
    <li class="mono"><a href="#pyx.php.array_filter">array_filter</a></li>
    <li class="mono"><a href="#pyx.php.array_intersect">array_intersect</a></li>
    <li class="mono"><a href="#pyx.php.array_intersect_key">array_intersect_key</a></li>
    <li class="mono"><a href="#pyx.php.array_key_exists">array_key_exists</a></li>
    <li class="mono"><a href="#pyx.php.array_keys">array_keys</a></li>
    <li class="mono"><a href="#pyx.php.array_map">array_map</a></li>
    <li class="mono"><a href="#pyx.php.array_merge">array_merge</a></li>
    <li class="mono"><a href="#pyx.php.array_plus">array_plus</a></li>
    <li class="mono"><a href="#pyx.php.array_pop">array_pop</a></li>
    <li class="mono"><a href="#pyx.php.array_push">array_push</a></li>
    <li class="mono"><a href="#pyx.php.array_reverse">array_reverse</a></li>
    <li class="mono"><a href="#pyx.php.array_search">array_search</a></li>
    <li class="mono"><a href="#pyx.php.array_shift">array_shift</a></li>
    <li class="mono"><a href="#pyx.php.array_slice">array_slice</a></li>
    <li class="mono"><a href="#pyx.php.array_unique">array_unique</a></li>
    <li class="mono"><a href="#pyx.php.array_values">array_values</a></li>
    <li class="mono"><a href="#pyx.php.array_walk">array_walk</a></li>
    <li class="mono"><a href="#pyx.php.ArrayAppend">ArrayAppend</a></li>
    <li class="mono"><a href="#pyx.php.ArrayToObj">ArrayToObj</a></li>
    <li class="mono"><a href="#pyx.php.ArrPy">ArrPy</a></li>
    <li class="mono"><a href="#pyx.php.arsort">arsort</a></li>
    <li class="mono"><a href="#pyx.php.asort">asort</a></li>
    <li class="mono"><a href="#pyx.php.boolval">boolval</a></li>
    <li class="mono"><a href="#pyx.php.call_user_func">call_user_func</a></li>
    <li class="mono"><a href="#pyx.php.call_user_func_array">call_user_func_array</a></li>
    <li class="mono"><a href="#pyx.php.checkdate">checkdate</a></li>
    <li class="mono"><a href="#pyx.php.class_exists">class_exists</a></li>
    <li class="mono"><a href="#pyx.php.clone">clone</a></li>
    <li class="mono"><a href="#pyx.php.Cmp">Cmp</a></li>
    <li class="mono"><a href="#pyx.php.cmp">cmp</a></li>
    <li class="mono"><a href="#pyx.php.compact">compact</a></li>
    <li class="mono"><a href="#pyx.php.ConvertPhpPatternToPy">ConvertPhpPatternToPy</a></li>
    <li class="mono"><a href="#pyx.php.ConvertPhpStrFormatToPy">ConvertPhpStrFormatToPy</a></li>
    <li class="mono"><a href="#pyx.php.ConvertPyMySqlColNamesToArray">ConvertPyMySqlColNamesToArray</a></li>
    <li class="mono"><a href="#pyx.php.ConvertPyMySqlColNamesToListOfArrays">ConvertPyMySqlColNamesToListOfArrays</a></li>
    <li class="mono"><a href="#pyx.php.count">count</a></li>
    <li class="mono"><a href="#pyx.php.current">current</a></li>
    <li class="mono"><a href="#pyx.php.date_default_timezone_set">date_default_timezone_set</a></li>
    <li class="mono"><a href="#pyx.php.debug_backtrace">debug_backtrace</a></li>
    <li class="mono"><a href="#pyx.php.define">define</a></li>
    <li class="mono"><a href="#pyx.php.defined">defined</a></li>
    <li class="mono"><a href="#pyx.php.display">display</a></li>
    <li class="mono"><a href="#pyx.php.dump">dump</a></li>
    <li class="mono"><a href="#pyx.php.echo">echo</a></li>
    <li class="mono"><a href="#pyx.php.empty">empty</a></li>
    <li class="mono"><a href="#pyx.php.end">end</a></li>
    <li class="mono"><a href="#pyx.php.error_log">error_log</a></li>
    <li class="mono"><a href="#pyx.php.escape_datetime">escape_datetime</a></li>
    <li class="mono"><a href="#pyx.php.escape_string">escape_string</a></li>
    <li class="mono"><a href="#pyx.php.explode">explode</a></li>
    <li class="mono"><a href="#pyx.php.extract">extract</a></li>
    <li class="mono"><a href="#pyx.php.file_exists">file_exists</a></li>
    <li class="mono"><a href="#pyx.php.file_get_contents">file_get_contents</a></li>
    <li class="mono"><a href="#pyx.php.filesize">filesize</a></li>
    <li class="mono"><a href="#pyx.php.floor">floor</a></li>
    <li class="mono"><a href="#pyx.php.fsockopen">fsockopen</a></li>
    <li class="mono"><a href="#pyx.php.func_get_arg">func_get_arg</a></li>
    <li class="mono"><a href="#pyx.php.func_get_args">func_get_args</a></li>
    <li class="mono"><a href="#pyx.php.func_num_args">func_num_args</a></li>
    <li class="mono"><a href="#pyx.php.function_exists">function_exists</a></li>
    <li class="mono"><a href="#pyx.php.get_class_vars">get_class_vars</a></li>
    <li class="mono"><a href="#pyx.php.get_object_vars">get_object_vars</a></li>
    <li class="mono"><a href="#pyx.php.gettype">gettype</a></li>
    <li class="mono"><a href="#pyx.php.html_escape">html_escape</a></li>
    <li class="mono"><a href="#pyx.php.htmlentities">htmlentities</a></li>
    <li class="mono"><a href="#pyx.php.htmlspecialchars">htmlspecialchars</a></li>
    <li class="mono"><a href="#pyx.php.htmlspecialchars1">htmlspecialchars1</a></li>
    <li class="mono"><a href="#pyx.php.implode">implode</a></li>
    <li class="mono"><a href="#pyx.php.in_array">in_array</a></li>
    <li class="mono"><a href="#pyx.php.ini_get">ini_get</a></li>
    <li class="mono"><a href="#pyx.php.intval">intval</a></li>
    <li class="mono"><a href="#pyx.php.is_array">is_array</a></li>
    <li class="mono"><a href="#pyx.php.is_bool">is_bool</a></li>
    <li class="mono"><a href="#pyx.php.is_float">is_float</a></li>
    <li class="mono"><a href="#pyx.php.is_int">is_int</a></li>
    <li class="mono"><a href="#pyx.php.is_null">is_null</a></li>
    <li class="mono"><a href="#pyx.php.is_numeric">is_numeric</a></li>
    <li class="mono"><a href="#pyx.php.is_object">is_object</a></li>
    <li class="mono"><a href="#pyx.php.is_scalar">is_scalar</a></li>
    <li class="mono"><a href="#pyx.php.is_string">is_string</a></li>
    <li class="mono"><a href="#pyx.php.isset">isset</a></li>
    <li class="mono"><a href="#pyx.php.Join">Join</a></li>
    <li class="mono"><a href="#pyx.php.key">key</a></li>
    <li class="mono"><a href="#pyx.php.ksort">ksort</a></li>
    <li class="mono"><a href="#pyx.php.ksort_to_list">ksort_to_list</a></li>
    <li class="mono"><a href="#pyx.php.levenshtein">levenshtein</a></li>
    <li class="mono"><a href="#pyx.php.ltrim">ltrim</a></li>
    <li class="mono"><a href="#pyx.php.Max">Max</a></li>
    <li class="mono"><a href="#pyx.php.mb_check_encoding">mb_check_encoding</a></li>
    <li class="mono"><a href="#pyx.php.mb_internal_encoding">mb_internal_encoding</a></li>
    <li class="mono"><a href="#pyx.php.mb_strlen">mb_strlen</a></li>
    <li class="mono"><a href="#pyx.php.mb_strtolower">mb_strtolower</a></li>
    <li class="mono"><a href="#pyx.php.mb_strtoupper">mb_strtoupper</a></li>
    <li class="mono"><a href="#pyx.php.mb_substr">mb_substr</a></li>
    <li class="mono"><a href="#pyx.php.md5">md5</a></li>
    <li class="mono"><a href="#pyx.php.microtime">microtime</a></li>
    <li class="mono"><a href="#pyx.php.Min">Min</a></li>
    <li class="mono"><a href="#pyx.php.multiple_replace">multiple_replace</a></li>
    <li class="mono"><a href="#pyx.php.mysql_affected_rows">mysql_affected_rows</a></li>
    <li class="mono"><a href="#pyx.php.mysql_close">mysql_close</a></li>
    <li class="mono"><a href="#pyx.php.mysql_fetch_assoc">mysql_fetch_assoc</a></li>
    <li class="mono"><a href="#pyx.php.mysql_fetch_field">mysql_fetch_field</a></li>
    <li class="mono"><a href="#pyx.php.mysql_fetch_row">mysql_fetch_row</a></li>
    <li class="mono"><a href="#pyx.php.mysql_get_client_info">mysql_get_client_info</a></li>
    <li class="mono"><a href="#pyx.php.mysql_get_server_info">mysql_get_server_info</a></li>
    <li class="mono"><a href="#pyx.php.mysql_insert_id">mysql_insert_id</a></li>
    <li class="mono"><a href="#pyx.php.mysql_num_fields">mysql_num_fields</a></li>
    <li class="mono"><a href="#pyx.php.mysql_ping">mysql_ping</a></li>
    <li class="mono"><a href="#pyx.php.mysql_query">mysql_query</a></li>
    <li class="mono"><a href="#pyx.php.mysql_real_escape_string">mysql_real_escape_string</a></li>
    <li class="mono"><a href="#pyx.php.mysql_result">mysql_result</a></li>
    <li class="mono"><a href="#pyx.php.mysql_set_charset">mysql_set_charset</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_affected_rows">mysqli_affected_rows</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_close">mysqli_close</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_fetch_array">mysqli_fetch_array</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_fetch_assoc">mysqli_fetch_assoc</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_fetch_field">mysqli_fetch_field</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_fetch_object">mysqli_fetch_object</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_fetch_row">mysqli_fetch_row</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_free_result">mysqli_free_result</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_get_client_info">mysqli_get_client_info</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_get_server_info">mysqli_get_server_info</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_insert_id">mysqli_insert_id</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_more_results">mysqli_more_results</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_next_result">mysqli_next_result</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_num_fields">mysqli_num_fields</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_ping">mysqli_ping</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_query">mysqli_query</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_real_escape_string">mysqli_real_escape_string</a></li>
    <li class="mono"><a href="#pyx.php.mysqli_set_charset">mysqli_set_charset</a></li>
    <li class="mono"><a href="#pyx.php.Next">Next</a></li>
    <li class="mono"><a href="#pyx.php.NextLargestIntKey">NextLargestIntKey</a></li>
    <li class="mono"><a href="#pyx.php.number_format">number_format</a></li>
    <li class="mono"><a href="#pyx.php.Object">Object</a></li>
    <li class="mono"><a href="#pyx.php.ObjToArrPy">ObjToArrPy</a></li>
    <li class="mono"><a href="#pyx.php.parse_url">parse_url</a></li>
    <li class="mono"><a href="#pyx.php.ParseFlagFromPattern">ParseFlagFromPattern</a></li>
    <li class="mono"><a href="#pyx.php.phpversion">phpversion</a></li>
    <li class="mono"><a href="#pyx.php.preg_match">preg_match</a></li>
    <li class="mono"><a href="#pyx.php.preg_match_Result">preg_match_Result</a></li>
    <li class="mono"><a href="#pyx.php.preg_match_tuple">preg_match_tuple</a></li>
    <li class="mono"><a href="#pyx.php.preg_quote">preg_quote</a></li>
    <li class="mono"><a href="#pyx.php.preg_replace">preg_replace</a></li>
    <li class="mono"><a href="#pyx.php.prev">prev</a></li>
    <li class="mono"><a href="#pyx.php.RecursiveCopyODict">RecursiveCopyODict</a></li>
    <li class="mono"><a href="#pyx.php.reset">reset</a></li>
    <li class="mono"><a href="#pyx.php.rtrim">rtrim</a></li>
    <li class="mono"><a href="#pyx.php.serialize">serialize</a></li>
    <li class="mono"><a href="#pyx.php.shuffle">shuffle</a></li>
    <li class="mono"><a href="#pyx.php.so">so</a></li>
    <li class="mono"><a href="#pyx.php.sprintf">sprintf</a></li>
    <li class="mono"><a href="#pyx.php.sprintf_StringIO">sprintf_StringIO</a></li>
    <li class="mono"><a href="#pyx.php.static_vars">static_vars</a></li>
    <li class="mono"><a href="#pyx.php.str_replace">str_replace</a></li>
    <li class="mono"><a href="#pyx.php.str_split">str_split</a></li>
    <li class="mono"><a href="#pyx.php.strcmp">strcmp</a></li>
    <li class="mono"><a href="#pyx.php.strip_tags">strip_tags</a></li>
    <li class="mono"><a href="#pyx.php.stripos">stripos</a></li>
    <li class="mono"><a href="#pyx.php.stripslashes">stripslashes</a></li>
    <li class="mono"><a href="#pyx.php.strlen">strlen</a></li>
    <li class="mono"><a href="#pyx.php.strpos">strpos</a></li>
    <li class="mono"><a href="#pyx.php.strrev">strrev</a></li>
    <li class="mono"><a href="#pyx.php.strstr">strstr</a></li>
    <li class="mono"><a href="#pyx.php.strtolower">strtolower</a></li>
    <li class="mono"><a href="#pyx.php.strtotime">strtotime</a></li>
    <li class="mono"><a href="#pyx.php.strtoupper">strtoupper</a></li>
    <li class="mono"><a href="#pyx.php.substr">substr</a></li>
    <li class="mono"><a href="#pyx.php.switch">switch</a></li>
    <li class="mono"><a href="#pyx.php.trim">trim</a></li>
    <li class="mono"><a href="#pyx.php.uasort">uasort</a></li>
    <li class="mono"><a href="#pyx.php.ucfirst">ucfirst</a></li>
    <li class="mono"><a href="#pyx.php.ucwords">ucwords</a></li>
    <li class="mono"><a href="#pyx.php.ucwords_py">ucwords_py</a></li>
    <li class="mono"><a href="#pyx.php.unserialize">unserialize</a></li>
    <li class="mono"><a href="#pyx.php.unset">unset</a></li>
    <li class="mono"><a href="#pyx.php.urldecode">urldecode</a></li>
    <li class="mono"><a href="#pyx.php.urlencode">urlencode</a></li>
    <li class="mono"><a href="#pyx.php.UrlEncodedHexToLowercase">UrlEncodedHexToLowercase</a></li>
    <li class="mono"><a href="#pyx.php.usort">usort</a></li>
    <li class="mono"><a href="#pyx.php.usort1">usort1</a></li>
    <li class="mono"><a href="#pyx.php.usort2">usort2</a></li>
    <li class="mono"><a href="#pyx.php.V">V</a></li>
    <li class="mono"><a href="#pyx.php.var_dump">var_dump</a></li>
    <li class="mono"><a href="#pyx.php.var_export">var_export</a></li>
    <li class="mono"><a href="#pyx.php.version_compare">version_compare</a></li>
    <li class="mono"><a href="#pyx.php.vsprintf">vsprintf</a></li>
  </ul>

    </li>

    <li class="set"><h3><a href="#header-variables">Module variables</a></h3>
      
  <ul>
    <li class="mono"><a href="#pyx.php.AllDataTypes">AllDataTypes</a></li>
    <li class="mono"><a href="#pyx.php.CASE_LOWER">CASE_LOWER</a></li>
    <li class="mono"><a href="#pyx.php.CASE_UPPER">CASE_UPPER</a></li>
    <li class="mono"><a href="#pyx.php.CharMask">CharMask</a></li>
    <li class="mono"><a href="#pyx.php.FreeRegLicenseArraysLimit">FreeRegLicenseArraysLimit</a></li>
    <li class="mono"><a href="#pyx.php.IterTypes">IterTypes</a></li>
    <li class="mono"><a href="#pyx.php.MappingTypes">MappingTypes</a></li>
    <li class="mono"><a href="#pyx.php.mysqlnd">mysqlnd</a></li>
    <li class="mono"><a href="#pyx.php.NumericTypes">NumericTypes</a></li>
    <li class="mono"><a href="#pyx.php.PHP_URL_FRAGMENT">PHP_URL_FRAGMENT</a></li>
    <li class="mono"><a href="#pyx.php.PHP_URL_HOST">PHP_URL_HOST</a></li>
    <li class="mono"><a href="#pyx.php.PHP_URL_PASS">PHP_URL_PASS</a></li>
    <li class="mono"><a href="#pyx.php.PHP_URL_PATH">PHP_URL_PATH</a></li>
    <li class="mono"><a href="#pyx.php.PHP_URL_PORT">PHP_URL_PORT</a></li>
    <li class="mono"><a href="#pyx.php.PHP_URL_QUERY">PHP_URL_QUERY</a></li>
    <li class="mono"><a href="#pyx.php.PHP_URL_SCHEME">PHP_URL_SCHEME</a></li>
    <li class="mono"><a href="#pyx.php.PHP_URL_USER">PHP_URL_USER</a></li>
    <li class="mono"><a href="#pyx.php.PHP_VERSION">PHP_VERSION</a></li>
    <li class="mono"><a href="#pyx.php.ScalarTypes">ScalarTypes</a></li>
    <li class="mono"><a href="#pyx.php.SeqSetTypes">SeqSetTypes</a></li>
    <li class="mono"><a href="#pyx.php.SeqTypes">SeqTypes</a></li>
    <li class="mono"><a href="#pyx.php.SetTypes">SetTypes</a></li>
    <li class="mono"><a href="#pyx.php.TAB_SIZE">TAB_SIZE</a></li>
    <li class="mono"><a href="#pyx.php.UnRegLicenseArraysLimit">UnRegLicenseArraysLimit</a></li>
    <li class="mono"><a href="#pyx.php.whitespace">whitespace</a></li>
  </ul>

    </li>

    </ul>
  </div>

    <article id="content">
      
  

  


  <header id="section-intro">
  <h1 class="title"><span class="name">pyx.php</span> module</h1>
  <h2>Run Converted PHP Codes in Python with the Speed of Compiled-C</h2>
<p><code>pyx.php</code> is a Cython compiled module that you can use to convert or
translate 99% of most common PHP source codes to pure Python.
In another words, it is a PHP-to-Python syntax emulation library in Cython.</p>
<p>If we have already translated most of the WordPress core and other
scripts from PHP to Python using <code>pyx.php</code>, you can convert almost
any PHP code into Python.</p>
<p>With the speed of compiled Cython, running Python code translated from PHP
using <code>pyx.php</code> might be even faster than running the original PHP code in
the same computer.</p>
<h2>Installation</h2>
<p><code>$ git clone https://github.com/wordpy/pyx/</code></p>
<p>Currently, <code>pyx.php</code> is only available for Python 3.x running 64-bit Linux.
Python 2.x, Mac, or other platforms can be compiled when there are many
requests.</p>
<h2>Quick Start</h2>
<p><code>$ python # or ipython</code></p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pyx.php</span> <span class="kn">as</span> <span class="nn">Php</span><span class="p">;</span> <span class="n">array</span> <span class="o">=</span> <span class="n">Php</span><span class="o">.</span><span class="n">array</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">arr1</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;1-0&#39;</span><span class="p">),(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;1-a&#39;</span><span class="p">),(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;1-b&#39;</span><span class="p">),)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">arr2</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;2-0&#39;</span><span class="p">),(</span>  <span class="mi">1</span><span class="p">,</span><span class="s1">&#39;2-1&#39;</span><span class="p">),(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;2-b&#39;</span><span class="p">),(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="s1">&#39;2-c&#39;</span><span class="p">),)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">arr1</span> <span class="o">+</span> <span class="n">arr2</span>   <span class="c1"># same as: Php.array_plus(arr1, arr2), see below</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">array_merge</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">arr2</span><span class="p">)</span>
</pre></div>


<h2>Why convert from PHP to Python?</h2>
<p>If you ask this question, you probably shouldn't use <code>pyx.php</code>.
There is nothing wrong with PHP, except that it's not Python.
So it's not Pythonic!</p>
<p>If you often have to go between the Python world and the PHP world
(WordPress, Drupal, or other PHP framework), you can feel my pains for
not being able to use tons and tons of native Python libraries with ease,
such as <a href="http://www.sqlalchemy.org/">SQLAlchemy</a>, Machine Learning,
Deep Learning such as TensorFlow, etc.</p>
<p>PHP frameworks such as WordPress do offer xml-rpc, wp-api, wp-cli,
and other APIs to interface with Python and other languages.
However, preparing Python programs for such APIs and having PHP to
interface with the API on the other end is error prone, not robust,
hard to troubleshoot on both ends, and not scalable.
Hence, enterprises, web, or big-data applications cannot rely on those APIs
for high-speed and high-volume Web applications and large scale data sets.</p>
<p>So comes <code>pyx.php</code> to PHP-to-Python programmers' rescue!
It's time to release the beast!</p>
<h2><code>pyx.php</code> is Robust</h2>
<p>I have been developing, deploying, and polishing this package on and off
for the past 3 years. <code>pyx.php</code> has been:</p>
<ul>
<li>deployed to hundreds of web sites,</li>
<li>been used very day, hour, minute, and second,</li>
<li>committed hundreds of millions of rows in MariaDB/MySql,</li>
<li>instantiated hundreds of billions of Php.array() objects, etc.</li>
</ul>
<h2>License</h2>
<p>Currently there are 4 versions of <code>pyx.php</code> with various number of
Php.array() that can be instantiated:</p>
<ol>
<li>Freeware (FREE unregistered license): 1,000 array()</li>
<li>FREE registered license.    10,000 array()</li>
<li>PAID registered license.   100,000 array()</li>
<li>PAID registered license. 1,000,000 array()</li>
</ol>
<p>Beyond the limit of number of array() that can be instantiated as listed
above, all versions are identical.
There is no time limit or other limits whatsoever.</p>
<p>Please register at <a href="https://wordpy.com/pyx/php/">https://wordpy.com/pyx/php/</a> to download the FREE
register version or the PAID versions.
See LICENSE.md</p>
<h2>Future Plans</h2>
<p>Of course the future dream for this <code>pyx.php</code> module is to open source it
under GPL, after there is <code>sufficient</code> demand.  We all know that there
are lots of ways to monetize with an open source business model.</p>
<p>You might ask, why don't you just open source now, so to generate more demand?
This theory is generally true from most popular software, but <code>pyx.php</code> is
most definitely not going to be a popular one. Why?</p>
<p>There are lots of smarter programmers than me.  The fact that a robust
PHP-to-Python emulation module like <code>pyx.php</code> has not been created
probably has to do with the fact that there will very little demand in the
future. However, someone like me still need to maintain and upgrade <code>pyx.php</code>
for the next 10+ years, and there should be some financial incentives
for me or/and others to support your enterprise or big-data needs.</p>
<p>After all, how much is it to pay for a low level Python programmer to deal
with PHP and Python libraries and compiled C codes, performance tuning,
testing, troubleshooting, etc?</p>
<p>Will they have the interest or the time to support your mission critical needs?</p>
<p>Either way, we will do our best to support the freeware and registered
versions. Please let us know if you have any comments or suggestsions.</p>
<p>Enjoy using <code>pyx.php</code>!</p>
  

  </header>

  <section id="section-items">

    <h2 class="section-title" id="header-classes">Classes</h2>
      
      <div class="item">
      <p id="pyx.php.array" class="name">class <span class="ident">array</span></p>
      
  
    <div class="desc"><p>Python class emulating PHP array.
PHP arrays are different from py objects that:</p>
<ul>
<li>PHP keys can be integers or strings (associative),</li>
<li>When a value is appended to an array, a numeric key is automatically
  assigned before appending the key/value pair to the array.
  The assigned associated key has integer value that equals to the maximum
  of the array's internal numeric iterator index keys plus 1,</li>
<li>Numeric integer keys in string are casted into integers,</li>
<li>The order of insertion to the array is preserved. key/value pairs are
  iterated according to the insertion order of the keys. We can use Python's
  OrderedDict to emulate,</li>
<li>PHP <code>array[] = 5</code> is translated to Python <code>array.append(5)</code> or
  <code>array[None] = 5</code>,</li>
<li>The iterator index keys are manipulated through PHP built-in functions, or
  are passed by reference, with a copy on write policy.</li>
</ul>
<p>Our Python emulation of the PHP array uses an OrderedDict instance variable,
where array._obj is an OrderedDic to store all elements of the array and
keep track of their orders of insertion using a custom pointer instance
variable.  Try:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pyx.php</span> <span class="kn">as</span> <span class="nn">Php</span><span class="p">;</span>  <span class="n">array</span> <span class="o">=</span> <span class="n">Php</span><span class="o">.</span><span class="n">array</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Arr0</span> <span class="o">=</span> <span class="n">array</span><span class="p">()</span>   <span class="c1"># Arr0._obj is an empty OrderedDict()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Arr1</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">11</span><span class="p">),</span> <span class="s1">&#39;zzz&#39;</span><span class="p">,</span> <span class="p">(</span><span class="mi">99</span><span class="p">,</span><span class="mi">99</span><span class="p">),</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">22</span><span class="p">)</span> <span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Arr1</span>
<span class="n">array</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">11</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">str</span><span class="o">&gt;</span> <span class="n">zzz</span>
  <span class="p">[</span><span class="mi">99</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">99</span>
  <span class="p">[</span><span class="mi">100</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">22</span>
  <span class="p">[</span><span class="mi">101</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">33</span>
  <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">22</span>
<span class="p">}</span>
</pre></div>


<p><code>zip()</code> works for array with different len !!!</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span> <span class="n">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="n">array</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">)</span> <span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
<span class="mi">1</span> <span class="mi">11</span>
<span class="mi">2</span> <span class="mi">22</span>
<span class="mi">3</span> <span class="mi">33</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span> <span class="n">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">array</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">)</span> <span class="p">):</span>
<span class="o">...</span>   <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
<span class="mi">1</span> <span class="mi">11</span>
<span class="mi">2</span> <span class="mi">22</span>
</pre></div></div>
  <div class="source_cont">
</div>


      <div class="class">
          <h3>Ancestors (in MRO)</h3>
          <ul class="class_list">
          <li><a href="#pyx.php.array">array</a></li>
          <li>builtins.object</li>
          </ul>
          <h3>Class variables</h3>
            <div class="item">
            <p id="pyx.php.array.__class__" class="name">var <span class="ident">__class__</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="pyx.php.array.__dict__" class="name">var <span class="ident">__dict__</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="pyx.php.array.__doc__" class="name">var <span class="ident">__doc__</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="pyx.php.array.__module__" class="name">var <span class="ident">__module__</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="pyx.php.array.__weakref__" class="name">var <span class="ident">__weakref__</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
          <h3>Static methods</h3>
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__init__">
    <p>def <span class="ident">__init__</span>(</p><p>self, *args, **kwargs)</p>
    </div>
    

    
  
    <div class="desc"><p>Sets array data variables to their default state.
PHP arrays are ordered mappings, so use py OrderedDict instead of dict
so that the order of insertion gets preserved!
  Beware that init _obj does not check for invalid key such as None!!
Supports <code>array( ('a',11), 'zzz', (99,99), 22, 33, (2,22) )</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__add__">
    <p>def <span class="ident">__add__</span>(</p><p>self, arr2)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__contains__">
    <p>def <span class="ident">__contains__</span>(</p><p>self, item)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns whether or not an element exists in the array</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__delitem__">
    <p>def <span class="ident">__delitem__</span>(</p><p>self, key)</p>
    </div>
    

    
  
    <div class="desc"><p>Delets a key</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__getitem__">
    <p>def <span class="ident">__getitem__</span>(</p><p>self, key)</p>
    </div>
    

    
  
    <div class="desc"><p>Attempts to access based on the provided index.
<code>__getitem__()</code> receive a slice obj when obj is sliced.
e.g. <code>slice(3, 4, -2)</code>  Supports slicing!!  See:
<a href="https://docs.python.org/2.3/whatsnew/section-slices.html">Extended Slices</a></p>
<div class="codehilite"><pre><span></span>&gt;&gt;&gt; a = array(3,4,5,6);
&gt;&gt;&gt; a[1:3]
array(2){[1]=&gt;4,[2]=&gt;5}
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__iter__">
    <p>def <span class="ident">__iter__</span>(</p><p>self)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns an iterator
over the values of the array:</p>
<div class="codehilite"><pre><span></span><span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">array</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>  <span class="c1"># prints array._obj.values()</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__len__">
    <p>def <span class="ident">__len__</span>(</p><p>self)</p>
    </div>
    

    
  
    <div class="desc"><p>returns size of the array</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__next__">
    <p>def <span class="ident">__next__</span>(</p><p>self, step=1, stop=None)</p>
    </div>
    

    
  
    <div class="desc"><p>If stop is None, iteration continues until the iterator is exhausted,
if at all; otherwise, it stops at the specified position.
See <a href="https://docs.python.org/3.6/library/itertools.html#itertools.islice">https://docs.python.org/3.6/library/itertools.html#itertools.islice</a></p>
<div class="codehilite"><pre><span></span><span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">array</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>  <span class="c1"># will get array._obj.values()</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__repr__">
    <p>def <span class="ident">__repr__</span>(</p><p>self, indent=0)</p>
    </div>
    

    
  
    <div class="desc"><p>Used for a string representation</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.__setitem__">
    <p>def <span class="ident">__setitem__</span>(</p><p>self, key, value)</p>
    </div>
    

    
  
    <div class="desc"><p>Sets <code>key =&gt; value</code>, except when <code>key = ''</code>, which grabs the next
largest integer.  Converts keys from string to integers wherever possible.</p>
<div class="codehilite"><pre><span></span>wp&gt; array( 1.9=&gt;11 )
=&gt; array(1) { [1]=&gt; int(11) }
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array._repr_body">
    <p>def <span class="ident">_repr_body</span>(</p><p>k, v, Indent=&#39;&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Partial for <strong>repr</strong></p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.append">
    <p>def <span class="ident">append</span>(</p><p>self, value)</p>
    </div>
    

    
  
    <div class="desc"><p>Emulate php append to array: <code>array[] = value</code>, as it doesn't work in py.
So emulate syntax by using:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Arr</span> <span class="o">=</span> <span class="n">array</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="mi">11</span> <span class="p">)</span>     <span class="c1"># Right way to append to array Arr</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Arr</span><span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">=</span> <span class="mi">22</span>       <span class="c1"># Right way to append to array Arr</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Arr</span><span class="p">[</span> <span class="s1">&#39;&#39;</span> <span class="p">]</span> <span class="o">=</span> <span class="mi">33</span><span class="p">;</span> <span class="n">Arr</span>  <span class="c1"># Wrong way to append to array Arr</span>
<span class="n">array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">11</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">22</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">33</span> <span class="p">}</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.clear">
    <p>def <span class="ident">clear</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.compare">
    <p>def <span class="ident">compare</span>(</p><p>self, arr2)</p>
    </div>
    

    
  
    <div class="desc"><p>Equality tests between ODict objects are order-sensitive and are
implemented as list(od1.items())==list(od2.items()).
Equality tests between ODict objects and other Mapping objects are
order-insensitive like regular dictionaries. This allows ODict objects
to be substituted anywhere a regular dictionary is used.</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="s1">&#39;k0&#39;</span><span class="p">,</span><span class="s1">&#39;a0&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;k1&#39;</span><span class="p">,</span><span class="s1">&#39;b1&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;k2&#39;</span><span class="p">,</span><span class="s1">&#39;c2&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;k3&#39;</span><span class="p">,</span><span class="s1">&#39;d3&#39;</span><span class="p">)</span> <span class="p">))</span>
<span class="p">[</span><span class="s1">&#39;a0&#39;</span><span class="p">,</span> <span class="s1">&#39;b1&#39;</span><span class="p">,</span> <span class="s1">&#39;c2&#39;</span><span class="p">,</span> <span class="s1">&#39;d3&#39;</span><span class="p">]</span>
</pre></div>


<p>So only compare order and value, not key/value.</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.copy">
    <p>def <span class="ident">copy</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.current">
    <p>def <span class="ident">current</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.end">
    <p>def <span class="ident">end</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.extend">
    <p>def <span class="ident">extend</span>(</p><p>self, iterable)</p>
    </div>
    

    
  
    <div class="desc"><p>Add each item of an iterable to the array</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.fromkeys">
    <p>def <span class="ident">fromkeys</span>(</p><p>seq, value=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://stackoverflow.com/questions/3387691/">How to perfectly override a dict</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.get">
    <p>def <span class="ident">get</span>(</p><p>self, key, default=None)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.getkeys">
    <p>def <span class="ident">getkeys</span>(</p><p>self)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns a list of the keys</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.items">
    <p>def <span class="ident">items</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.keys">
    <p>def <span class="ident">keys</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.next">
    <p>def <span class="ident">next</span>(</p><p>self, start=0, step=1, stop=None, default=False)</p>
    </div>
    

    
  
    <div class="desc"><p>emulate: <a href="https://docs.python.org/3.6/library/functions.html#next">https://docs.python.org/3.6/library/functions.html#next</a></p>
<p>Retrieve the next item from the iterator by calling its <code>__next__()</code> method.
If default is given, it is returned if the iterator is exhausted,
otherwise StopIteration is raised.</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; $ar = array(0,1,2,3,4);</span>
<span class="x">php&gt; next($ar);           #out# int(1)</span>
<span class="x">py&gt;  next(iter(range(9))) #out# 0,    so set pointer =0 if pointer &lt;0</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.pop">
    <p>def <span class="ident">pop</span>(</p><p>self, key)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.pop_return_default_if_key_not_found">
    <p>def <span class="ident">pop_return_default_if_key_not_found</span>(</p><p>self, key, default)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.popitem">
    <p>def <span class="ident">popitem</span>(</p><p>self, last=True)</p>
    </div>
    

    
  
    <div class="desc"><p>returns and removes a (key, value) pair. The pairs are returned in
LIFO order if last is true or FIFO order if false.</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.prev">
    <p>def <span class="ident">prev</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.push">
    <p>def <span class="ident">push</span>(</p><p>self, *items)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.reindex">
    <p>def <span class="ident">reindex</span>(</p><p>self)</p>
    </div>
    

    
  
    <div class="desc"><p>Re-index int indexes to new number sequence starting from <code>0, 1, 2...</code>
mutate current arr, don't create a new <code>array( *[(k,v)...] )</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.rename">
    <p>def <span class="ident">rename</span>(</p><p>self, OldKey, NewKey)</p>
    </div>
    

    
  
    <div class="desc"><p>Raname OldKey to NewKey by mutating the same ODict, rather than
creating a new ODict.</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.reset">
    <p>def <span class="ident">reset</span>(</p><p>self)</p>
    </div>
    

    
  
    <div class="desc"><p>rewinds array pointer to 1st element and returns value of 1st element</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.setdefault">
    <p>def <span class="ident">setdefault</span>(</p><p>self, key, default=None)</p>
    </div>
    

    
  
    <div class="desc"><p>If key is in the dict, returns its value. If not, inserts key with a
value of default and returns default. default defaults to None.</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.update">
    <p>def <span class="ident">update</span>(</p><p>self, arr=None, **kwargs)</p>
    </div>
    

    
  
    <div class="desc"><p>Update with key/value pairs from array, overwriting existing keys.
Returns None.</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.array.values">
    <p>def <span class="ident">values</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
          <h3>Instance variables</h3>
            <div class="item">
            <p id="pyx.php.array.pointer" class="name">var <span class="ident">pointer</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
      </div>
      </div>
      
      <div class="item">
      <p id="pyx.php.ConstCls" class="name">class <span class="ident">ConstCls</span></p>
      
  
    <div class="desc"><p>Py Constant. Method 1. Best Method!! vars can't redefine if defined!!</p></div>
  <div class="source_cont">
</div>


      <div class="class">
          <h3>Ancestors (in MRO)</h3>
          <ul class="class_list">
          <li><a href="#pyx.php.ConstCls">ConstCls</a></li>
          <li>builtins.object</li>
          </ul>
      </div>
      </div>
      
      <div class="item">
      <p id="pyx.php.OrderedDict" class="name">class <span class="ident">ODict</span></p>
      
  
    <div class="desc"><p>Dictionary that remembers insertion order</p></div>
  <div class="source_cont">
</div>


      <div class="class">
          <h3>Ancestors (in MRO)</h3>
          <ul class="class_list">
          <li><a href="#pyx.php.OrderedDict">ODict</a></li>
          <li>builtins.dict</li>
          <li>builtins.object</li>
          </ul>
      </div>
      </div>
      
      <div class="item">
      <p id="pyx.php.stdClass" class="name">class <span class="ident">stdClass</span></p>
      
  
    <div class="desc"><p>Created by typecasting to object.  See:
<a href="http://php.net/manual/en/reserved.classes.php">http://php.net/manual/en/reserved.classes.php</a></p>
<div class="codehilite"><pre><span></span><span class="x">wp&gt; (object) &#39;a&#39; #out# object(stdClass) (1) { [&quot;scalar&quot;]=&gt; string(1) &quot;a&quot;}</span>
<span class="x">wp&gt; (object) 111 #out# object(stdClass) (1) { [&quot;scalar&quot;]=&gt; int(111) }</span>
<span class="x">wp&gt; (object)11.1 #out# object(stdClass) (1) { [&quot;scalar&quot;]=&gt; float(11.1) }</span>
<span class="x">wp&gt; (object)true #out# object(stdClass) (1) { [&quot;scalar&quot;]=&gt; bool(true) }</span>
<span class="x">wp&gt; (object)null #out# object(stdClass) (0) { }</span>
</pre></div></div>
  <div class="source_cont">
</div>


      <div class="class">
          <h3>Ancestors (in MRO)</h3>
          <ul class="class_list">
          <li><a href="#pyx.php.stdClass">stdClass</a></li>
          <li>pyx.type.ODictToObj</li>
          <li>builtins.object</li>
          </ul>
          <h3>Class variables</h3>
            <div class="item">
            <p id="pyx.php.stdClass.array" class="name">var <span class="ident">array</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
          <h3>Static methods</h3>
            
  <div class="item">
    <div class="name def" id="pyx.php.stdClass.__init__">
    <p>def <span class="ident">__init__</span>(</p><p>self, arg=None)</p>
    </div>
    

    
  
    <div class="desc"><p>Object(<em>args) expected at most 1 arg, so change to arg instead of </em>args</p></div>
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.stdClass.IniObj">
    <p>def <span class="ident">IniObj</span>(</p><p>self, arg)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      </div>
      </div>
      
      <div class="item">
      <p id="pyx.php.Switcher" class="name">class <span class="ident">Switcher</span></p>
      
  
    <div class="desc"><p>PHP <code>switch()</code> can be also be translated to Python by using <code>Switcher()</code>
that uses a dispatch method to determine method name at runtime:</p>
<div class="codehilite"><pre><span></span><span class="k">class</span> <span class="nc">Switcher</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">numbers_to_methods_to_strings</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">argument</span><span class="p">):</span>
    <span class="n">method_name</span> <span class="o">=</span> <span class="s1">&#39;number_&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
    <span class="n">method</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">method_name</span><span class="p">,</span> <span class="k">lambda</span><span class="p">:</span> <span class="s2">&quot;nothing&quot;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">method</span><span class="p">()</span>
  <span class="k">def</span> <span class="nf">number_0</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&quot;zero&quot;</span>
  <span class="k">def</span> <span class="nf">number_1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&quot;one&quot;</span>
  <span class="k">def</span> <span class="nf">number_2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&quot;two&quot;</span>
</pre></div>


<p>However, it's still best to translate to <code>if, elif, elif,... , else</code>.</p></div>
  <div class="source_cont">
</div>


      <div class="class">
          <h3>Ancestors (in MRO)</h3>
          <ul class="class_list">
          <li><a href="#pyx.php.Switcher">Switcher</a></li>
          <li>builtins.object</li>
          </ul>
          <h3>Static methods</h3>
            
  <div class="item">
    <div class="name def" id="pyx.php.Switcher.number_0">
    <p>def <span class="ident">number_0</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.Switcher.number_1">
    <p>def <span class="ident">number_1</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.Switcher.number_2">
    <p>def <span class="ident">number_2</span>(</p><p>self)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="pyx.php.Switcher.numbers_to_methods_to_strings">
    <p>def <span class="ident">numbers_to_methods_to_strings</span>(</p><p>self, argument)</p>
    </div>
    

    
  
    <div class="desc"><p>Dispatch method.  Prefix the method_name with <code>'number_'</code> because
method names cannot begin with an integer.</p>
<p>Get the method from 'self'. Default to a lambda.</p>
<p>Call the method as we return it.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      </div>
      </div>


    <h2 class="section-title" id="header-functions">Functions</h2>
      
  <div class="item">
    <div class="name def" id="pyx.php.abs">
    <p>def <span class="ident">abs</span>(</p><p>num)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.absint">
    <p>def <span class="ident">absint</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://developer.wordpress.org/reference/functions/absint/">https://developer.wordpress.org/reference/functions/absint/</a> </p>
<p><code>function absint( $maybeint ) { return abs( intval( $maybeint ) ); }</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.acos">
    <p>def <span class="ident">acos</span>(</p><p>num)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.acosh">
    <p>def <span class="ident">acosh</span>(</p><p>num)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.addslashes">
    <p>def <span class="ident">addslashes</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.addslashes.php">https://php.net/manual/function.addslashes.php</a>
Uglier but Faster!</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Str</span> <span class="o">=</span> <span class="s2">&quot;John &#39;Johny&#39; Doe (a.k.a. &quot;</span><span class="n">Super</span> <span class="n">Joe</span><span class="s2">&quot;)\ &quot;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">addslashes</span><span class="p">(</span><span class="n">Str</span><span class="p">)</span>
<span class="s1">&#39;John </span><span class="se">\&#39;</span><span class="s1">Johny</span><span class="se">\&#39;</span><span class="s1"> Doe (a.k.a. </span><span class="se">\&quot;</span><span class="s1">Super Joe</span><span class="se">\&quot;</span><span class="s1">)</span><span class="se">\\</span><span class="s1">\ &#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">Php</span><span class="o">.</span><span class="n">addslashes</span><span class="p">(</span><span class="n">Str</span><span class="p">))</span>
<span class="n">John</span> <span class="s1">&#39;Johny&#39;</span> <span class="n">Doe</span> <span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">k</span><span class="o">.</span><span class="n">a</span><span class="o">.</span> <span class="s2">&quot;Super Joe&quot;</span><span class="p">)</span>\
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.addslashes_slow">
    <p>def <span class="ident">addslashes_slow</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.addslashes.php">https://php.net/manual/function.addslashes.php</a>   Slower!</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.Array">
    <p>def <span class="ident">Array</span>(</p><p>Obj)</p>
    </div>
    

    
  
    <div class="desc"><p>Equivalent to php: <code>(array) Obj</code>.   See:
<a href="https://stackoverflow.com/questions/7390872/">ReflectionObject vs. cast to array vs. get_object_vars for retrieving
   public vars</a></p>
<p><code>get_object_vars()</code> returns only the variable that are visible from the
calling scope (e.g. it may or may not return protected or private variable).
Casting to array returns all properties, including private ones.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_change_key_case">
    <p>def <span class="ident">array_change_key_case</span>(</p><p>arr, case=&#39;CASE_LOWER&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.array-change-key-case.php">https://php.net/manual/en/function.array-change-key-case.php</a></p>
<p>PHP uses upper on any case that is not <code>'CASE_LOWER'</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_diff">
    <p>def <span class="ident">array_diff</span>(</p><p>arr1, arr2)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-diff.php">https://php.net/manual/function.array-diff.php</a></p>
<p>Returns an array containing all the entries from arr1 that are not
present in any of the other arrays.</p>
<div class="codehilite"><pre><span></span><span class="x">wp&gt; array_diff( array(&quot;a&quot; =&gt; &quot;green&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;red&quot;),</span>
<span class="x">                array(&quot;b&quot; =&gt; &quot;green&quot;, &quot;yellow&quot;, &quot;red&quot;))</span>
<span class="x">=&gt; array(1) { [1]=&gt; string(4) &quot;blue&quot; }</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_fill_keys">
    <p>def <span class="ident">array_fill_keys</span>(</p><p>keys, value)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-fill-keys.php">https://php.net/manual/function.array-fill-keys.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_filter">
    <p>def <span class="ident">array_filter</span>(</p><p>arr, callback=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-filter.php">https://php.net/manual/function.array-filter.php</a></p>
<p>If callback is None, all entries of input equal to FALSE will be removed.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_intersect">
    <p>def <span class="ident">array_intersect</span>(</p><p>arr, *arrays)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-intersect.php">https://php.net/manual/function.array-intersect.php</a></p>
<p>Returns an array containing all the values of arr that are present in
all the arguments. Note that keys are preserved.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_intersect_key">
    <p>def <span class="ident">array_intersect_key</span>(</p><p>arr1, *arrays)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.array-intersect-key.php">https://php.net/manual/en/function.array-intersect-key.php</a></p>
<p>Returns an associative array containing all entries of arr1 which have
keys that are present in all arguments.</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; $arr1 = array(&#39;blue&#39; =&gt;1, &#39;red&#39; =&gt;2, &#39;green&#39; =&gt;3, &#39;purple&#39;=&gt;4);</span>
<span class="x">php&gt; $arr2 = array(&#39;green&#39;=&gt;5, &#39;blue&#39;=&gt;6, &#39;yellow&#39;=&gt;7, &#39;cyan&#39;  =&gt;8);</span>
<span class="x">php&gt; var_dump(array_intersect_key($arr1, $arr2));</span>
<span class="x">array(2) { [&quot;blue&quot;]=&gt; int(1), [&quot;green&quot;]=&gt; int(3)</span>
</pre></div>


<p>Python:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">array_intersect_key</span><span class="p">(</span>
<span class="o">...</span>       <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="s1">&#39;blue&#39;</span> <span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="s1">&#39;red&#39;</span> <span class="p">,</span><span class="mi">2</span><span class="p">),(</span><span class="s1">&#39;green&#39;</span><span class="p">,</span><span class="mi">3</span><span class="p">),(</span><span class="s1">&#39;p&#39;</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="p">),</span>
<span class="o">...</span>       <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">,</span><span class="mi">5</span><span class="p">),(</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span><span class="mi">6</span><span class="p">),(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span><span class="mi">7</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;cyan&#39;</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span> <span class="p">),</span>
<span class="o">...</span>     <span class="p">)</span>
<span class="n">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;green&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">3</span> <span class="p">}</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_key_exists">
    <p>def <span class="ident">array_key_exists</span>(</p><p>key, arr)</p>
    </div>
    

    
  
    <div class="desc"><ul>
<li>Bad:  <code>return key in arr</code>, as this equals to: <code>return key in arr.values()</code></li>
<li>Good: <code>return key in arr.keys()</code></li>
</ul></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_keys">
    <p>def <span class="ident">array_keys</span>(</p><p>arr, search_value=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-keys.php">https://php.net/manual/function.array-keys.php</a></p>
<p>Returns the keys, numeric and string, from the input array.
If the optional search_value is specified, then only the keys for that
value are returned. Otherwise, all the keys from the input are returned.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_map">
    <p>def <span class="ident">array_map</span>(</p><p>callback, arr1, arr2=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-map.php">https://php.net/manual/function.array-map.php</a>
array_map() returns an array containing all the elements of arr1 after
applying the callback func to each one. The num of parameters that the
callback func accepts should match the num of arrays passed to the array_map()</p>
<div class="codehilite"><pre><span></span>`array array_map( callback $callback , array $arr1 [, array $... ] )`
</pre></div>


<p>Py implementation here only offers to pass 1 or 2 arrays into array_map():</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">arr1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">return</span> <span class="n">s</span><span class="o">*</span><span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">array_map</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="n">arr1</span><span class="p">)</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">):</span>
<span class="o">...</span>   <span class="k">return</span> <span class="p">{</span><span class="n">s1</span><span class="p">:</span><span class="n">s2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">array_map</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="n">arr1</span><span class="p">,</span> <span class="n">arr1</span><span class="p">)</span>
<span class="p">[{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">2</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="mi">3</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="mi">5</span><span class="p">:</span> <span class="mi">5</span><span class="p">}]</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_merge">
    <p>def <span class="ident">array_merge</span>(</p><p>arr1, arr2)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.array-merge.php">https://php.net/manual/en/function.array-merge.php</a></p>
<p>If the input arrays have the same string keys, the later value for that key
will overwrite the previous one. If the arrays contain numeric keys, the
later value will not overwrite the original value, but will be appended.
Values in the input array with numeric keys will be renumbered with
incrementing keys starting from zero in the result array.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_plus">
    <p>def <span class="ident">array_plus</span>(</p><p>arr1, arr2)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/language.operators.array.php">https://php.net/manual/en/language.operators.array.php</a></p>
<p>The <code>+</code> operator returns the right-hand array appended to the left-hand array;
for keys that exist in both arrays, elements from the left-hand array will
be used, &amp; the matching elements from the right-hand array will be ignored.</p>
<p><code>array_merge()</code> has slightly different behavior:  (see above)</p>
<p><a href="https://stackoverflow.com/questions/5394157/">difference btw array_merge &amp; array + array
</a></p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">arr1</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;1-0&#39;</span><span class="p">),(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;1-a&#39;</span><span class="p">),(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;1-b&#39;</span><span class="p">),)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">arr2</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;2-0&#39;</span><span class="p">),(</span>  <span class="mi">1</span><span class="p">,</span><span class="s1">&#39;2-1&#39;</span><span class="p">),(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;2-b&#39;</span><span class="p">),(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="s1">&#39;2-c&#39;</span><span class="p">),)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">array_plus</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">arr2</span><span class="p">)</span>  <span class="c1"># or arr1 + arr2</span>
<span class="n">array</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{[</span> <span class="mi">0</span> <span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">-</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">-</span><span class="n">a</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">-</span><span class="n">b</span><span class="p">,</span>
          <span class="p">[</span> <span class="mi">1</span> <span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">-</span><span class="n">c</span><span class="p">,</span> <span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">array_merge</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">arr2</span><span class="p">)</span>
<span class="n">array</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="p">{[</span> <span class="mi">0</span> <span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">-</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">-</span><span class="n">a</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">-</span><span class="n">b</span><span class="p">,</span>
          <span class="p">[</span> <span class="mi">1</span> <span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">-</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span> <span class="mi">2</span> <span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">-</span><span class="n">c</span><span class="p">,}</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_pop">
    <p>def <span class="ident">array_pop</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-pop.php">https://php.net/manual/function.array-pop.php</a></p>
<p>Pops and returns last value of the array, shortening the array by 1 element.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_push">
    <p>def <span class="ident">array_push</span>(</p><p>List, *args)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-push.php">https://php.net/manual/function.array-push.php</a></p>
<p>Push one or more elements onto the end of array
<a href="https://stackoverflow.com/questions/676677">add elements to an array in PHP?</a></p>
<div class="codehilite"><pre><span></span><span class="x">$cart = array(); $cart[] = 13; $cart[] = 14;</span>
<span class="x"># same as:</span>
<span class="x">$cart = array(); array_push($cart, 13); array_push($cart, 14);</span>
<span class="x"># same as:</span>
<span class="x">$cart = array(); array_push($cart, 13, 14);</span>
</pre></div>


<p>if you're only pushing a single element every time (like in a loop)
or a single element once, it's best to use the <code>$cart[] = 13</code> method
not only because it's less characters to do the same operation,
but it also doesn't impose the performance overhead of a function call,
which <code>array_push()</code> would.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_reverse">
    <p>def <span class="ident">array_reverse</span>(</p><p>arr, preserve_keys=False)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-reverse.php">https://php.net/manual/function.array-reverse.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_search">
    <p>def <span class="ident">array_search</span>(</p><p>needle, haystack, Strict=True)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-search.php">https://php.net/manual/function.array-search.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_shift">
    <p>def <span class="ident">array_shift</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-shift.php">https://php.net/manual/function.array-shift.php</a></p>
<p>Shifts the first value of the array off and returns it, shortening the array
by one element and moving everything down.
Integer indexes are reindexed to new sequence starting from 0.</p>
<div class="codehilite"><pre><span></span><span class="x">wp&gt; $arr = array(11, 22, 33)</span>
<span class="x">=&gt; array(3) { [0]=&gt; int(11) [1]=&gt; int(22) [2]=&gt; int(33) }</span>
<span class="x">wp&gt; array_shift( $arr ) #out# =&gt; int(11)</span>
<span class="x">wp&gt; $arr</span>
<span class="x">=&gt; array(2) { [0]=&gt; int(22) [1]=&gt; int(33) }</span>

<span class="x">wp&gt; $Arr1 = array(11, &#39;a&#39;=&gt;99, 88=&gt;888, &#39;b&#39;=&gt;&#39;bb&#39;, 33)</span>
<span class="x">wp&gt; array_shift( $Arr1 )</span>
<span class="x">=&gt; int(11)</span>
<span class="x">wp&gt; $Arr1</span>
<span class="x">=&gt; array(4) { [&quot;a&quot;]  =&gt; int(99)</span>
<span class="x">              [0]    =&gt; int(888)</span>
<span class="x">              [&quot;b&quot;]  =&gt; string(2) &quot;bb&quot;</span>
<span class="x">              [1]    =&gt; int(33)</span>
<span class="x">            }</span>
</pre></div>


<p>Python:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Arr1</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="mi">11</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">99</span><span class="p">),</span> <span class="p">(</span><span class="mi">88</span><span class="p">,</span><span class="mi">888</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;bb&#39;</span><span class="p">),</span> <span class="mi">33</span> <span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">array_shift</span><span class="p">(</span><span class="n">Arr1</span><span class="p">)</span>
<span class="mi">11</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Arr1</span>
<span class="n">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">=&gt;&lt;</span><span class="s1">&#39;int&#39;</span><span class="o">&gt;</span><span class="mi">99</span>
           <span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="o">=&gt;&lt;</span><span class="s1">&#39;int&#39;</span><span class="o">&gt;</span><span class="mi">888</span>
           <span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span><span class="o">=&gt;&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span><span class="n">bb</span>
           <span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="o">=&gt;&lt;</span><span class="s1">&#39;int&#39;</span><span class="o">&gt;</span><span class="mi">33</span> <span class="p">}</span>
</pre></div>


<p><code>array.popitem(last=True)</code> returns and removes a (key, value) pair.
The pairs are returned in LIFO order if last is true or FIFO order if false.</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="s1">&#39;b&#39;</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="s1">&#39;b&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_slice">
    <p>def <span class="ident">array_slice</span>(</p><p>arr, offset, length=None, preserve_keys=False)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-slice.php">https://php.net/manual/function.array-slice.php</a></p>
<p><code>preserve_keys = False</code> by default to reorder and reset the array indices.
Set to TRUE to change this behaviour.</p>
<p>If length is given and is positive, the sequence will have that many
elements in it. If length is given and is negative then the sequence will
stop that many elements from the end of the array. If it is omitted, then
the sequence will have everything from offset up until the end of the array.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_unique">
    <p>def <span class="ident">array_unique</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-unique.php">https://php.net/manual/function.array-unique.php</a></p>
<p>Takes an input array and returns a new array without duplicate values.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_values">
    <p>def <span class="ident">array_values</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-values.php">https://php.net/manual/function.array-values.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.array_walk">
    <p>def <span class="ident">array_walk</span>(</p><p>arr, func, userdata=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.array-walk.php">https://php.net/manual/function.array-walk.php</a></p>
<p>bool <code>array_walk(array &amp;$array, callable $callback [, mixed $userdata=NULL])</code></p>
<p>Applies user-defined callback function to each element of the array array.
<code>array_walk()</code> is not affected by the internal array pointer of array.
It will walk through the entire array regardless of pointer position.</p>
<p>callback takes 2 params: 1) array param's value, 2) key/index
If callback needs to be working with the actual values of the array, specify
the first parameter of callback as a reference. Then, any changes made to
those elements will be made in the original array itself.
If the optional userdata parameter is supplied, it will be passed as the
third parameter to the callback.</p>
<p>MUST CHANGE func to return modified val so arr[k] will be modified accordingly</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; $fruits = array(&quot;d&quot;=&gt;&quot;lemon&quot;,  &quot;a&quot;=&gt;&quot;orange&quot;,</span>
<span class="x">                     &quot;b&quot;=&gt;&quot;banana&quot;, &quot;c&quot;=&gt;&quot;apple&quot;  );</span>
<span class="x">php&gt; function test_alter( &amp;$item1, $key, $prefix ) {</span>
<span class="x">         $item1 = &quot;$prefix: $item1&quot;;</span>
<span class="x">     }</span>
<span class="x">php&gt; array_walk($fruits, &#39;test_alter&#39;, &#39;fruit&#39;);</span>
<span class="x">=&gt; bool(true)</span>
<span class="x">php&gt; $fruits;</span>
<span class="x">=&gt; array(4) {</span>
<span class="x">  [&quot;d&quot;]=&gt; string(12) &quot;fruit: lemon&quot; , [&quot;a&quot;]=&gt; string(13) &quot;fruit: orange&quot;</span>
<span class="x">  [&quot;b&quot;]=&gt; string(13) &quot;fruit: banana&quot;, [&quot;c&quot;]=&gt; string(12) &quot;fruit: apple&quot;</span>
<span class="x">}</span>
</pre></div>


<p>Python:</p>
<div class="codehilite"><pre><span></span><span class="n">py</span><span class="o">&gt;</span> <span class="n">fruits</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="s2">&quot;d&quot;</span><span class="p">,</span><span class="s2">&quot;lemon&quot;</span><span class="p">),</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;orange&quot;</span><span class="p">),</span>
                    <span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;banana&quot;</span><span class="p">),(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;apple&quot;</span><span class="p">),</span>  <span class="p">)</span>
<span class="n">py</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">test_alter</span><span class="p">(</span><span class="n">item1</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">prefix</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">prefix</span> <span class="o">+</span><span class="s2">&quot;: &quot;</span> <span class="o">+</span> <span class="n">item1</span>
<span class="n">py</span><span class="o">&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">array_walk</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">test_alter</span><span class="p">,</span> <span class="s1">&#39;fruit&#39;</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="n">true</span><span class="p">)</span>
<span class="n">py</span><span class="o">&gt;</span> <span class="n">fruits</span>
<span class="n">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">[</span><span class="s1">&#39;d&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">lemon</span> <span class="p">,</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">orange</span><span class="p">,</span>
  <span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">banana</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="s1">&#39;str&#39;</span><span class="o">&gt;</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">apple</span> <span class="p">,</span>
<span class="p">}</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ArrayAppend">
    <p>def <span class="ident">ArrayAppend</span>(</p><p>arr, var)</p>
    </div>
    

    
  
    <div class="desc"><p>Appends var to array arr.
In PHP, for example:</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; $B = array( &#39;a&#39;=&gt;&#39;aa&#39;, &#39;b&#39;=&gt;&#39;bb&#39; );</span>
<span class="x">php&gt; $B[] = &#39;cc&#39;; print_r($B);</span>
<span class="x">Array( [a] =&gt; aa, [b] =&gt; bb, [0] =&gt; cc, )</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ArrayToObj">
    <p>def <span class="ident">ArrayToObj</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/language.types.object.php">https://php.net/manual/en/language.types.object.php</a></p>
<p>Convert array to object.  Equivalent to php: <code>(object) arr</code></p>
<p>If an object is converted to an object, it is not modified.</p>
<p>If a value of any other type is converted to an object, a new instance of
the stdClass built-in class is created. If the value was NULL, the new
instance will be empty. An array converts to an object with properties named
by keys and corresponding values, with the exception of numeric keys which
will be inaccessible unless iterated.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ArrPy">
    <p>def <span class="ident">ArrPy</span>(</p><p>*args, **kwargs)</p>
    </div>
    

    
  
    <div class="desc"><p>The following are ways
to instantiate an array:</p>
<div class="codehilite"><pre><span></span><span class="n">NewArr1</span> <span class="o">=</span> <span class="n">ArrPy</span><span class="p">(</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">22</span><span class="p">)]</span> <span class="p">)</span>             <span class="c1"># same as:</span>
<span class="n">NewArr2</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="n">_obj</span> <span class="o">=</span> <span class="n">ODict</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">22</span><span class="p">)]))</span>
<span class="n">ArraySyntax</span> <span class="o">=</span> <span class="n">array</span><span class="p">((</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">11</span><span class="p">),</span> <span class="s1">&#39;zzz&#39;</span><span class="p">,</span> <span class="p">(</span><span class="mi">99</span><span class="p">,</span><span class="mi">99</span><span class="p">),</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">22</span><span class="p">))</span>
<span class="n">ODictSyntax</span> <span class="o">=</span> <span class="n">ArrPy</span><span class="p">([(</span><span class="mi">11</span><span class="p">,</span><span class="mi">111</span><span class="p">),</span> <span class="p">(</span><span class="mi">22</span><span class="p">,</span><span class="mi">222</span><span class="p">)])</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.arsort">
    <p>def <span class="ident">arsort</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.arsort.php">https://php.net/manual/function.arsort.php</a></p>
<p>Sort an array in reverse order and maintain index association.</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">arsort</span><span class="p">(</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="s1">&#39;banana&#39;</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;apple&#39;</span> <span class="p">,</span><span class="mi">4</span><span class="p">),</span>
<span class="o">...</span>                    <span class="p">(</span><span class="s1">&#39;pear&#39;</span>  <span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;orange&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="p">))</span>
<span class="n">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="s1">&#39;apple&#39;</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;banana&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">3</span><span class="p">,</span> 
           <span class="p">[</span><span class="s1">&#39;orange&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;pear&#39;</span><span class="p">]</span>  <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">arsort</span><span class="p">(</span><span class="n">array</span><span class="p">((</span><span class="s2">&quot;d&quot;</span><span class="p">,</span><span class="s2">&quot;lemon&quot;</span><span class="p">),</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;orange&quot;</span><span class="p">),</span>
<span class="o">...</span>                  <span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;banana&quot;</span><span class="p">),(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;app&quot;</span><span class="p">)</span>   <span class="p">,))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">asort</span><span class="p">(</span> <span class="n">array</span><span class="p">((</span><span class="s2">&quot;d&quot;</span><span class="p">,</span><span class="s2">&quot;lemon&quot;</span><span class="p">),</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;orange&quot;</span><span class="p">),</span>
<span class="o">...</span>                  <span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;banana&quot;</span><span class="p">),(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;app&quot;</span><span class="p">)</span>   <span class="p">,))</span>
</pre></div>


<p>Php:</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; arsort(array(&quot;d&quot;=&gt;&quot;lemon&quot;,  &quot;a&quot;=&gt;&quot;orange&quot;,</span>
<span class="x">                  &quot;b&quot;=&gt;&quot;banana&quot;, &quot;c&quot;=&gt;&quot;apple&quot;, ));</span>
<span class="x">php&gt; foreach ($fruits as $key =&gt; $val) { echo &quot;$key = $val\n&quot;; }</span>
<span class="x">a = orange, d = lemon, b = banana, c = apple</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.asort">
    <p>def <span class="ident">asort</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.asort.php">https://php.net/manual/function.asort.php</a></p>
<p>Sorts an array and maintains index association.</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">asort</span><span class="p">(</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="s1">&#39;banana&#39;</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;apple&#39;</span> <span class="p">,</span><span class="mi">4</span><span class="p">),</span>
<span class="o">...</span>                   <span class="p">(</span><span class="s1">&#39;pear&#39;</span>  <span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;orange&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="p">))</span>
<span class="n">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="s1">&#39;pear&#39;</span><span class="p">]</span>  <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;orange&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">,</span>
           <span class="p">[</span><span class="s1">&#39;banana&#39;</span><span class="p">]</span><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;apple&#39;</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nb">int</span><span class="o">&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="p">}</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.boolval">
    <p>def <span class="ident">boolval</span>(</p><p>var)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.call_user_func">
    <p>def <span class="ident">call_user_func</span>(</p><p>func, *args)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.call-user-func.php">https://php.net/manual/function.call-user-func.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.call_user_func_array">
    <p>def <span class="ident">call_user_func_array</span>(</p><p>func, args)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.call-user-func-array.php">https://php.net/manual/function.call-user-func-array.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.checkdate">
    <p>def <span class="ident">checkdate</span>(</p><p>m, d, y)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.checkdate.php">https://php.net/manual/function.checkdate.php</a></p>
<p>Validates a Gregorian date.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.class_exists">
    <p>def <span class="ident">class_exists</span>(</p><p>class_name, autoload=True, DefinedClasses=(&#39;wp_error&#39;,))</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.class-exists.php">https://php.net/manual/en/function.class-exists.php</a></p>
<p><code>bool class_exists ( string $class_name [, bool $autoload = true ] )</code></p>
<ul>
<li>class_name: The class name. The name is matched in a case-insensitive manner</li>
<li>autoload: Whether or not to call <code>__autoload</code> by default (disabled here)</li>
</ul>
<p>Returns if the given class has been defined by using case-insensitive check:
<code>return class_name.lower() in DefinedClasses</code></p>
<p><code>DefinedClasses = ('wp_error',)</code> allows users to add more defined classes.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.clone">
    <p>def <span class="ident">clone</span>(</p><p>Obj, Class=None, DeepCopy=False)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/language.oop5.cloning.php">https://php.net/manual/en/language.oop5.cloning.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.Cmp">
    <p>def <span class="ident">Cmp</span>(</p><p>a, b)</p>
    </div>
    

    
  
    <div class="desc"><p>Comparison
function:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">Cmp</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">return</span> <span class="mi">0</span>
  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="k">else</span> <span class="mi">1</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">A</span> <span class="o">=</span> <span class="n">array</span><span class="p">((</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">4</span><span class="p">),(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="mi">8</span><span class="p">),(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">9</span><span class="p">),</span>
<span class="o">...</span>           <span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">),(</span><span class="s1">&#39;f&#39;</span><span class="p">,</span><span class="mi">5</span><span class="p">),(</span><span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">),(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">),)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">uasort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">Php</span><span class="o">.</span><span class="n">Cmp</span><span class="p">)</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.cmp">
    <p>def <span class="ident">cmp</span>(</p><p>a, b)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://docs.python.org/3.1/whatsnew/3.0.html">https://docs.python.org/3.1/whatsnew/3.0.html</a></p>
<p><code>(a &gt; b) - (a &lt; b)</code> as the equivalent for <code>cmp(a, b)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.compact">
    <p>def <span class="ident">compact</span>(</p><p>Locals, *keys)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.compact.php">https://php.net/manual/en/function.compact.php</a></p>
<p>Creates an array containing variables and their values</p>
<p>@params: pass locals() to Locals</p>
<p>Evil! Avoid using it! difficult to see array member gets set from a variable</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; compacted = compact( &#39;user_pass&#39;,...,&#39;user_registered&#39; )</span>
<span class="x">php&gt; compact(&#39;zz&#39;);</span>
<span class="x">array(0){}         # Php gives no error when &#39;zz&#39; not in Locals</span>

<span class="x">php&gt; $xjoin = 11; $join = 1;</span>
<span class="x">php&gt; compact( &#39;xjoin&#39;, array( &#39;fields&#39;, &#39;join&#39;, &#39;where&#39;, &#39;distinct&#39;,))</span>
<span class="x">=&gt; array(2) { [&quot;xjoin&quot;]=&gt; int(11), [&quot;join&quot;]=&gt; int(1) }</span>

<span class="x">py&gt; a  = 10; b = 2; Php.compact(locals(), &#39;a&#39;, &#39;b&#39;)</span>
<span class="x">array(2) { [&#39;a&#39;]=&gt; &lt;int&gt; 10, [&#39;b&#39;]=&gt; &lt;int&gt; 2, }</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ConvertPhpPatternToPy">
    <p>def <span class="ident">ConvertPhpPatternToPy</span>(</p><p>pattern, flags=0)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/regexp.reference.delimiters">https://php.net/regexp.reference.delimiters</a></p>
<p>Strip <code>i</code> at the end of <code>pattern = '/^def/i'</code>.
Change to: <code>re.IGNORECASE</code>.
Strips delimiters '/' at both ends of pattern.</p>
<p>Php <code>'/^def/i'</code> translated to Python <code>'^def', re.IGNORECASE</code>.</p>
<p>Delimiter can be any non-alphanumeric, non-backslash, non-whitespace char.
Often used delimiters are forward slashes <code>/</code>, hash signs <code>#</code> and tildes <code>~</code>.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ConvertPhpStrFormatToPy">
    <p>def <span class="ident">ConvertPhpStrFormatToPy</span>(</p><p>Format)</p>
    </div>
    

    
  
    <div class="desc"><p>Change a Format string by
replacing <code>'(%\d\$s|%d)'</code> with <code>'%s'</code>:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Format</span> <span class="o">=</span> <span class="s1">&#39;WordPress %1$s requires MySQL </span><span class="si">%d</span><span class="s1"> or higher&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ConvertPhpStrFormatToPy</span><span class="p">(</span><span class="n">Format</span><span class="p">)</span>  <span class="c1">#equals to:</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;(%\d\$s|</span><span class="si">%d</span><span class="s1">)&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="si">%s</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">Format</span><span class="p">)</span>
<span class="n">Out</span><span class="p">:</span> <span class="s1">&#39;WordPress </span><span class="si">%s</span><span class="s1"> requires MySQL </span><span class="si">%s</span><span class="s1"> or higher&#39;</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ConvertPyMySqlColNamesToArray">
    <p>def <span class="ident">ConvertPyMySqlColNamesToArray</span>(</p><p>row)</p>
    </div>
    

    
  
    <div class="desc"><p>Resolves difference between <code>pymysql</code> and <code>Php.mysqli_fetch*</code>:</p>
<p>Needs to convert from column name <code>'tt.term_id' to 'term_id'</code>.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ConvertPyMySqlColNamesToListOfArrays">
    <p>def <span class="ident">ConvertPyMySqlColNamesToListOfArrays</span>(</p><p>rows)</p>
    </div>
    

    
  
    <div class="desc"><p><code>return [ ConvertPyMySqlColNamesToArray(row) for row in rows ]</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.count">
    <p>def <span class="ident">count</span>(</p><p>List)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.current">
    <p>def <span class="ident">current</span>(</p><p>var)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns the value of the array element that's currently being pointed to
by the internal pointer. It does not move the pointer in any way.</p>
<p>If the internal pointer points beyond the end of the elements list or the
array is empty, <code>current()</code> returns FALSE.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.date_default_timezone_set">
    <p>def <span class="ident">date_default_timezone_set</span>(</p><p>TimeZone=&#39;US/Pacific&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.date-default-timezone-set.php">https://php.net/manual/function.date-default-timezone-set.php</a></p>
<p>Python replacement for PHP's <code>date_default_timezone_set</code>.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.debug_backtrace">
    <p>def <span class="ident">debug_backtrace</span>(</p><p>provide_object=True)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.debug-backtrace.php">https://php.net/manual/function.debug-backtrace.php</a></p>
<p>return list = 
    <code>[&lt;FrameSummary file .../bin/ipython, line 11 in &lt;module&gt;&gt;, ...]</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.define">
    <p>def <span class="ident">define</span>(</p><p>Name, Value)</p>
    </div>
    

    
  
    <div class="desc"><p>Tries to <code>WpC.WB.define(Name, Value)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.defined">
    <p>def <span class="ident">defined</span>(</p><p>Name)</p>
    </div>
    

    
  
    <div class="desc"><p>Tries to check if <code>WpC.WB.defined(Name)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.display">
    <p>def <span class="ident">display</span>(</p><p>o, space, num, key, typ, proret)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.dump">
    <p>def <span class="ident">dump</span>(</p><p>o, space, num, key, typ, proret)</p>
    </div>
    

    
  
    <div class="desc"><p>Used by <code>var_dump()</code> and <code>var_export()</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.echo">
    <p>def <span class="ident">echo</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p>Equivalent to <code>print(Str)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.empty">
    <p>def <span class="ident">empty</span>(</p><p>*Vars)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.empty.php">https://php.net/manual/function.empty.php</a></p>
<p>Determines whether a variable is empty.  Returns true if the variable is an
empty string, false, array(), NULL, "0", 0, or an unset variable.</p>
<p>Usage for local or global var:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">empty</span><span class="p">({</span><span class="o">**</span><span class="nb">locals</span><span class="p">(),</span> <span class="o">**</span><span class="n">WB</span><span class="o">.</span><span class="n">Wj</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">},</span> <span class="n">attr</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">empty</span><span class="p">({</span><span class="o">**</span><span class="nb">locals</span><span class="p">(),</span> <span class="o">**</span><span class="nb">globals</span><span class="p">()</span>     <span class="p">},</span> <span class="n">attr</span><span class="p">)</span>
</pre></div>


<p>Given <code>Wj.wpdb.blogid</code>, will recursively find if nested objs or arrays are
empty:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">empty</span><span class="p">(</span><span class="n">Wj</span><span class="p">,</span> <span class="s1">&#39;wpdb&#39;</span><span class="p">,</span> <span class="s1">&#39;blogid&#39;</span> <span class="p">)</span> <span class="c1">#out# False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">empty</span><span class="p">(</span><span class="n">Wj</span><span class="p">,</span> <span class="s1">&#39;wpdb&#39;</span><span class="p">,</span> <span class="s1">&#39;blogidz&#39;</span><span class="p">)</span> <span class="c1">#out# True</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.end">
    <p>def <span class="ident">end</span>(</p><p>var)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.error_log">
    <p>def <span class="ident">error_log</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p>Equivalent to <code>print(Str)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.escape_datetime">
    <p>def <span class="ident">escape_datetime</span>(</p><p>obj, mapping=None)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.escape_string">
    <p>def <span class="ident">escape_string</span>(</p><p>value, mapping=None)</p>
    </div>
    

    
  
    <div class="desc"><p>escapes <em>value</em> without adding quote. Value should be unicode.
Used by <code>mysqli_real_escape_string()</code></p>
<p>Copied from <code>pymysql.converters</code>:</p>
<p><code>if not PY2: escape_string = _escape_unicode</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.explode">
    <p>def <span class="ident">explode</span>(</p><p>delimiter, Str, limit=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.explode.php">https://php.net/manual/function.explode.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.extract">
    <p>def <span class="ident">extract</span>(</p><p>Locals, d, Flag=&#39;EXTR_OVERWRITE&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.extract.php">https://php.net/manual/en/function.extract.php</a></p>
<p>Evil! Avoid using it! harder to determine where a variable was defined</p>
<p><code>raise NotImplementedError("Php.extract() is not supported since it's evil!")</code></p>
<p>@params: pass <code>locals()</code> to Locals</p>
<p><a href="https://stackoverflow.com/questions/8028708/dynamically-set-local-variable">https://stackoverflow.com/questions/8028708/dynamically-set-local-variable</a></p>
<p>Modifying <code>locals()</code> is undefined! Outside a func when locals() and
<code>WB.Wj.__dict__</code> are the same it will work.</p>
<p>Inside a function is will usually not work. BAD Usage KeyError:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Locals</span> <span class="o">=</span> <span class="n">Php</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="nb">locals</span><span class="p">(),</span> <span class="n">group_key</span><span class="p">,</span> <span class="s1">&#39;EXTR_OVERWRITE&#39;</span> <span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">group_key</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
      <span class="nb">locals</span><span class="p">()[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">Locals</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</pre></div>


<p>Also bad in functions: var not defined!</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
      <span class="c1"># doesn&#39;t work in func: locals()[k] = v</span>
      <span class="k">exec</span><span class="p">(</span><span class="s2">&quot;{}= {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">,</span>
           <span class="n">v</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,(</span><span class="nb">int</span><span class="p">,</span><span class="nb">float</span><span class="p">))</span> <span class="k">else</span> <span class="nb">repr</span><span class="p">(</span><span class="n">v</span><span class="p">)))</span>
</pre></div>


<p>Translate to the following Python syntax instead:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">group</span> <span class="o">=</span> <span class="n">group_key</span><span class="p">[</span><span class="s1">&#39;group&#39;</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">key</span>   <span class="o">=</span> <span class="n">group_key</span><span class="p">[</span><span class="s1">&#39;key&#39;</span><span class="p">]</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.file_exists">
    <p>def <span class="ident">file_exists</span>(</p><p>filename)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.file_get_contents">
    <p>def <span class="ident">file_get_contents</span>(</p><p>url)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.filesize">
    <p>def <span class="ident">filesize</span>(</p><p>file)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.floor">
    <p>def <span class="ident">floor</span>(</p><p>var)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns the next lowest integer value by
rounding down value if necessary:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="mf">9.9</span><span class="p">)</span>  <span class="c1">#out: 9</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="o">-</span><span class="mf">9.9</span><span class="p">)</span> <span class="c1">#out: -10</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.fsockopen">
    <p>def <span class="ident">fsockopen</span>(</p><p>hostname, port=-1, errno=None, errstr=None, timeout=60)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.fsockopen.php">https://php.net/manual/en/function.fsockopen.php</a></p>
<div class="codehilite"><pre><span></span>(string hostname [, int port = -1 [, int &amp;errno [, string &amp;errstr
                 [, float timeout =
                    ini_get(&quot;default_socket_timeout&quot;) ]]]] )
</pre></div>


<p>Initiates a socket connection to the resource specified by hostname.
use <code>pyx.io.IsPortOpen</code> instead.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.func_get_arg">
    <p>def <span class="ident">func_get_arg</span>(</p><p>AllArgs, arg_num)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.func-get-arg.php">https://php.net/manual/en/function.func-get-arg.php</a></p>
<p>arg_num: arg offset. Function args are counted starting from zero.</p>
<p>Returns the specified argument from the AllArgs list, or FALSE on error.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.func_get_args">
    <p>def <span class="ident">func_get_args</span>(</p><p>AllArgs)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.func-get-args.php">https://php.net/manual/function.func-get-args.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.func_num_args">
    <p>def <span class="ident">func_num_args</span>(</p><p>AllArgs)</p>
    </div>
    

    
  
    <div class="desc"><p>returns
<code>len(AllArgs)</code></p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">add_post_type_support</span><span class="p">(</span> <span class="n">post_type</span><span class="p">,</span> <span class="n">Feature</span><span class="p">,</span> <span class="o">*</span><span class="n">OtherArgs</span> <span class="p">):</span>
  <span class="n">AllArgs</span> <span class="o">=</span> <span class="n">post_type</span><span class="p">,</span> <span class="n">Feature</span><span class="p">,</span> <span class="o">*</span><span class="n">OtherArgs</span>
  <span class="k">if</span> <span class="n">Php</span><span class="o">.</span><span class="n">func_num_args</span><span class="p">(</span><span class="n">AllArgs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.function_exists">
    <p>def <span class="ident">function_exists</span>(</p><p>Func)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.function-exists.php">https://php.net/manual/function.function-exists.php</a> </p>
<p>Returns if Func exists in this module or in <code>dir(WpC.WB.Wj)</code>.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.get_class_vars">
    <p>def <span class="ident">get_class_vars</span>(</p><p>Class)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.get_object_vars">
    <p>def <span class="ident">get_object_vars</span>(</p><p>Obj)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.get-object-vars.php">https://php.net/manual/function.get-object-vars.php</a>
<a href="https://stackoverflow.com/questions/7390872/">ReflectionObject vs. cast to array vs. get_object_vars for retrieving
   public vars</a></p>
<p>Returns an array that contains the accessible non-static properties of a
given object that are visible from the calling scope.
(e.g. it may or may not return protected or private variable).
None will return if a property has not been assigned a value</p>
<p>Casting to array returns all properties, including private ones.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.gettype">
    <p>def <span class="ident">gettype</span>(</p><p>var)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns type(var)</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.html_escape">
    <p>def <span class="ident">html_escape</span>(</p><p>text)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://wiki.python.org/moin/EscapingHtml">Escaping Html</a></p>
<p>Produce entities within text: escape quotes and apostrophes as well.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.htmlentities">
    <p>def <span class="ident">htmlentities</span>(</p><p>text, Quote=&#39;ENT_QUOTES&#39;, Charset=&#39;UTF-8&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.htmlentities.php">https://php.net/manual/function.htmlentities.php</a></p>
<p>Translate all HTML char entities!
Available <code>quote_style</code> constants:</p>
<div class="codehilite"><pre><span></span>Constant Name Description
ENT_COMPAT    convert double-quotes and leave single-quotes alone.
ENT_QUOTES    convert both double and single quotes.
ENT_NOQUOTES  leave both double and single quotes unconverted.
</pre></div>


<p>Charset: <code>UTF-8</code>  ASCII compatible multi-byte 8-bit Unicode.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.htmlspecialchars">
    <p>def <span class="ident">htmlspecialchars</span>(</p><p>text, Quote=&#39;ENT_QUOTES&#39;, Charset=&#39;UTF-8&#39;, double_encode=True)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.htmlspecialchars.php">https://php.net/manual/function.htmlspecialchars.php</a></p>
<p>For all HTML char entities to be translated, use <code>htmlentities()</code> instead.
Only translate HTML char entities</p>
<div class="codehilite"><pre><span></span>&amp; (ampersand) becomes &#39;&amp;amp;&#39;
&quot; (double quote) becomes &#39;&amp;quot;&#39; when ENT_NOQUOTES is not set.
&#39; (single quote) becomes &#39;&amp;#039;&#39; only when ENT_QUOTES is set.
&lt; (less than) becomes &#39;&amp;lt;&#39;
&gt; (greater than) becomes &#39;&amp;gt;&#39;
</pre></div>


<p>Charset: <code>UTF-8</code>  ASCII compatible multi-byte 8-bit Unicode.
When double_encode is turned off PHP will not encode existing html entities,
the default is to convert everything.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.htmlspecialchars1">
    <p>def <span class="ident">htmlspecialchars1</span>(</p><p>text)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://stackoverflow.com/questions/931423/">php htmlspecialchars in py</a>
escape quotes and apostrophes as well.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.implode">
    <p>def <span class="ident">implode</span>(</p><p>glue, pieces)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.implode.php">https://php.net/manual/function.implode.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.in_array">
    <p>def <span class="ident">in_array</span>(</p><p>needle, haystack, Strict=False)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.in-array.php">https://php.net/manual/function.in-array.php</a></p>
<p>Searches haystack (an array) for needle using loose comparison.
If the third parameter strict is set to TRUE, <code>in_array()</code> also checks the
types of the needle in the haystack.</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">Arr</span>  <span class="o">=</span> <span class="n">array</span><span class="p">(</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">333</span><span class="p">)</span> <span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">in_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">Arr</span><span class="p">)</span>
<span class="bp">False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">in_array</span><span class="p">(</span><span class="mi">333</span><span class="p">,</span> <span class="n">Arr</span><span class="p">)</span>
<span class="bp">True</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ini_get">
    <p>def <span class="ident">ini_get</span>(</p><p>Var)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.ini-get.php">https://php.net/manual/function.ini-get.php</a></p>
<p>Returns the value of the configuration option on success.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.intval">
    <p>def <span class="ident">intval</span>(</p><p>var, base=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.intval.php">https://php.net/manual/en/function.intval.php</a></p>
<p>Returns the integer value of var, using the specified base for the conversion
(the default is base 10).</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; intval(&#39;11a11&#39;)  =&gt; int(11)   #TODO</span>
<span class="x">php&gt; intval(&#39;a11a11&#39;) =&gt; int(0)</span>
<span class="x">py&gt;  int(&#39;&#39;) =&gt; ValueError: invalid literal for int() with base 10: &#39;&#39;</span>
<span class="x">php&gt; (int)&#39;&#39; =&gt; int(0)</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_array">
    <p>def <span class="ident">is_array</span>(</p><p>var, AllowIterTypes=True)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.is-array.php">https://php.net/manual/en/function.is-array.php</a></p>
<p>Returns whether var is an array.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_bool">
    <p>def <span class="ident">is_bool</span>(</p><p>var)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_float">
    <p>def <span class="ident">is_float</span>(</p><p>var)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_int">
    <p>def <span class="ident">is_int</span>(</p><p>var)</p>
    </div>
    

    
  
    <div class="desc"><p>lambda x: isinstance(x, int)</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_null">
    <p>def <span class="ident">is_null</span>(</p><p>var)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_numeric">
    <p>def <span class="ident">is_numeric</span>(</p><p>var)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.is-numeric.php">https://php.net/manual/en/function.is-numeric.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_object">
    <p>def <span class="ident">is_object</span>(</p><p>val, ExcludeClass=False)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_scalar">
    <p>def <span class="ident">is_scalar</span>(</p><p>var)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.is-scalar.php">https://php.net/manual/en/function.is-scalar.php</a></p>
<p>Returns if var is a one of ScalarTypes <code>= (int, float, str, bool)</code>.</p>
<p>Notes: Types NULL, array, object and resource are not scalar !!!</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.is_string">
    <p>def <span class="ident">is_string</span>(</p><p>var)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.isset">
    <p>def <span class="ident">isset</span>(</p><p>*Vars)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/types.comparisons.php">https://php.net/manual/en/types.comparisons.php</a></p>
<p>Determine if a variable is set and is not NULL.
Returns true only when the variable is not null.</p>
<div class="codehilite"><pre><span></span>wp&gt; isset($wpdb-&gt;zzz);   #=&gt; bool(false)
wp&gt; $wpdb-&gt;zzz = null;   #=&gt; NULL
wp&gt; isset($wpdb-&gt;zzz);   #=&gt; bool(false)
wp&gt; isset($Unknown[1])   #=&gt; bool(false)
</pre></div>


<p>So isset($this-&gt;$attr) can't translate to py as: <code>hasattr(var, attr)</code>
Usage for local or global var:</p>
<div class="codehilite"><pre><span></span>Php.isset({**locals(), **WB.Wj.__dict__}, attr)
</pre></div>


<p>WARNING!! Must translate from PHP to py as:</p>
<div class="codehilite"><pre><span></span>php&gt; isset($a, $b)
py&gt;  Php.isset(locals(),&#39;a&#39;) and Php.isset(locals(),&#39;b&#39;)
</pre></div>


<p>The following can recursively find if nested objs or arrays are empty:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">wpdb</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&quot;select count(*) from wp_users&quot;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">isset</span><span class="p">(</span><span class="n">wpdb</span><span class="p">,</span> <span class="s1">&#39;last_result&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;count(*)&quot;</span><span class="p">)</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">empty</span><span class="p">(</span><span class="n">wpdb</span><span class="p">,</span> <span class="s1">&#39;last_result&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;count(*)&quot;</span><span class="p">)</span>
<span class="bp">False</span>
</pre></div>


<p>same as Php:</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; isset( $wpdb-&gt;last_result[0]-&gt;{&#39;count(*)&#39;} )</span>
<span class="x">=&gt; bool(true)</span>
<span class="x">php&gt; empty( $wpdb-&gt;last_result[0]-&gt;{&#39;count(*)&#39;} )</span>
<span class="x">=&gt; bool(false)</span>

<span class="x">php&gt; if ( isset($error) )</span>
<span class="x">py&gt;  if Php.isset(locals(), &#39;error&#39;):</span>

<span class="x">php&gt; if ( ! isset( self::$back_compat_keys ) ) {</span>
<span class="x">          self::$back_compat_keys = array(</span>
<span class="x">py&gt;  if not Php.isset(self, back_compat_keys):</span>
<span class="x">       setattr(self, back_compat_keys, array(</span>

<span class="x">php&gt; if ( isset( self::$back_compat_keys[ $key ] ) )</span>
<span class="x">          $key = self::$back_compat_keys[ $key ];</span>
<span class="x">py&gt;  if Php.isset( getattr(self, back_compat_keys), key ):</span>
<span class="x">       key = getattr(self, back_compat_keys)[ key ]</span>

<span class="x">php&gt; $this-&gt;data-&gt;$key = $value;</span>
<span class="x">py&gt;  setattr(this.data, key, value)</span>
<span class="x">php&gt; if ( isset( $this-&gt;data-&gt;$key ) ) {</span>
<span class="x">          unset( $this-&gt;data-&gt;$key );</span>
<span class="x">py&gt;  if Php.isset( self.data, key ):</span>
<span class="x">       Php.unset( this.data, key ) # delattr( this.data, key )</span>

<span class="x">php&gt; = isset( clauses[ &#39;fields&#39; ] ) ? clauses[ &#39;fields&#39; ] : &#39;&#39;</span>
<span class="x">py&gt;  = clauses.get(&#39;fields&#39;  , &#39;&#39;)  # a better translation to py</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.Join">
    <p>def <span class="ident">Join</span>(</p><p>glue, pieces)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.implode.php">https://php.net/manual/function.implode.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.key">
    <p>def <span class="ident">key</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns the index element of the current array position.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ksort">
    <p>def <span class="ident">ksort</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p>Improve ksort_to_list. Returns a new array.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ksort_to_list">
    <p>def <span class="ident">ksort_to_list</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.ksort.php">https://php.net/manual/function.ksort.php</a></p>
<p>Had we used a Python dictionary as an associative array, we will not be
able to "modify the order" of the dictionary like you can in PHP, since
py dict is unordered.</p>
<p>Since we use py OrderedDict for the array arr, we return a new list of
the (key, value) pairs of the array sorted according to <code>arr.keys()</code>.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.levenshtein">
    <p>def <span class="ident">levenshtein</span>(</p><p>s1, s2)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ltrim">
    <p>def <span class="ident">ltrim</span>(</p><p>Str, charlist=&#39; \t\n\r\x00\x0b&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.ltrim.php">https://php.net/manual/function.ltrim.php</a></p>
<p>Strip whitespace (or other characters) from the beginning of a string.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.Max">
    <p>def <span class="ident">Max</span>(</p><p>*args)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.max.php">https://php.net/manual/en/function.max.php</a></p>
<p><code>Max()</code> here emulates PHP <code>max()</code>. It's different from py builtin <code>max()</code>!!
Values of different types will be compared using the standard comparison
rules. For instance, a non-numeric string will be compared to an integer as
though it were 0, but multiple non-numeric string values will be compared
alphanumerically. The actual value returned will be of the original type
with no conversion applied.</p>
<ul>
<li>params:  MappingTypes = <code>(dict, ODict, array)</code> or SeqSetTypes.</li>
<li>returns: max of <code>MappingTypes.values()</code> or SeqSetTypes.
           Otherwise returns None, and print PHP Warning message.</li>
</ul></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mb_check_encoding">
    <p>def <span class="ident">mb_check_encoding</span>(</p><p>Str, Encoding=&#39;ASCII&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://stackoverflow.com/questions/33004065/">check if str is 100% ascii</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mb_internal_encoding">
    <p>def <span class="ident">mb_internal_encoding</span>(</p><p>Encoding, MbIntEncoding=[&#39;UTF-8&#39;])</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mb_strlen">
    <p>def <span class="ident">mb_strlen</span>(</p><p>Str, encoding=&#39;utf-8&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Begins with Py3, all strings are unicode objects. Remove <code>.decode('utf-8')</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mb_strtolower">
    <p>def <span class="ident">mb_strtolower</span>(</p><p>Str, Encoding)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mb_strtoupper">
    <p>def <span class="ident">mb_strtoupper</span>(</p><p>Str, Encoding)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mb_substr">
    <p>def <span class="ident">mb_substr</span>(</p><p>*args, **kwargs)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.md5">
    <p>def <span class="ident">md5</span>(</p><p>Str, raw_output=False)</p>
    </div>
    

    
  
    <div class="desc"><p>Calculates md5 hash of a string.
Emulate:</p>
<div class="codehilite"><pre><span></span>php&gt; md5( 1   );  # same as:
php&gt; md5(&#39;1&#39;  );
php&gt; md5( 2.2 );  # same as:
php&gt; md5(&#39;2.2&#39;);

py&gt; md5(b&#39;hello world&#39;)  # same as:
py&gt; md5( &#39;hello world&#39;)
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.microtime">
    <p>def <span class="ident">microtime</span>(</p><p>get_as_float=False)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.microtime.php">https://php.net/manual/function.microtime.php</a></p>
<p>Returns current Unix timestamp with microseconds.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.Min">
    <p>def <span class="ident">Min</span>(</p><p>*args)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.min.php">https://php.net/manual/en/function.min.php</a></p>
<p><code>Min()</code> here emulates PHP <code>min()</code>. It's different from py builtin <code>min()</code> !!</p>
<p>Values of different types will be compared using the standard comparison
rules. For instance, a non-numeric string will be compared to an integer as
though it were 0, but multiple non-numeric string values will be compared
alphanumerically. The actual value returned will be of the original type
with no conversion applied.</p>
<ul>
<li>params:  MappingTypes = <code>(dict, ODict, array)</code>, or SeqSetTypes.</li>
<li>returns: min of <code>MappingTypes.values()</code> or SeqSetTypes.
           Otherwise returns None, and print PHP Warning message.</li>
</ul></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.multiple_replace">
    <p>def <span class="ident">multiple_replace</span>(</p><p>dic, text)</p>
    </div>
    

    
  
    <div class="desc"><p>Perform multiple replacements in one step.
For example:</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;Larry Wall&quot;</span> <span class="p">:</span> <span class="s2">&quot;Guido van Rossum&quot;</span><span class="p">,</span>
<span class="o">...</span>         <span class="s2">&quot;creator&quot;</span> <span class="p">:</span> <span class="s2">&quot;Benevolent Dictator for Life&quot;</span><span class="p">,</span>
<span class="o">...</span>         <span class="s2">&quot;Perl&quot;</span> <span class="p">:</span> <span class="s2">&quot;Python&quot;</span><span class="p">,</span>
<span class="o">...</span>       <span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">multiple_replace</span><span class="p">(</span><span class="n">dic</span><span class="p">,</span> <span class="n">some_text</span><span class="p">))</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_affected_rows">
    <p>def <span class="ident">mysql_affected_rows</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_close">
    <p>def <span class="ident">mysql_close</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_fetch_assoc">
    <p>def <span class="ident">mysql_fetch_assoc</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_fetch_field">
    <p>def <span class="ident">mysql_fetch_field</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_fetch_row">
    <p>def <span class="ident">mysql_fetch_row</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_get_client_info">
    <p>def <span class="ident">mysql_get_client_info</span>(</p><p>dbh=None)</p>
    </div>
    

    
  
    <div class="desc"><p>return mysqlnd</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_get_server_info">
    <p>def <span class="ident">mysql_get_server_info</span>(</p><p>dbh)</p>
    </div>
    

    
  
    <div class="desc"><p><code>Warning: mysql_get_server_info() expects parameter 1 to be resource,</code>
<code>object given... eval()'d code on line 1</code></p>
<p><code>=&gt; NULL</code></p>
<p><code>return None</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_insert_id">
    <p>def <span class="ident">mysql_insert_id</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_num_fields">
    <p>def <span class="ident">mysql_num_fields</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_ping">
    <p>def <span class="ident">mysql_ping</span>(</p><p>dbh, reconnect=False)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_query">
    <p>def <span class="ident">mysql_query</span>(</p><p>query, dbh)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.mysql-query.php">https://php.net/manual/function.mysql-query.php</a></p>
<p><code>return mysqli_query(dbh, query)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_real_escape_string">
    <p>def <span class="ident">mysql_real_escape_string</span>(</p><p>Str, dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_result">
    <p>def <span class="ident">mysql_result</span>(</p><p>dbh, N=0)</p>
    </div>
    

    
  
    <div class="desc"><p>Orig params: <code>mysql_result(result, 0)</code>, replace with <code>(dbh, 0)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysql_set_charset">
    <p>def <span class="ident">mysql_set_charset</span>(</p><p>charset, dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_affected_rows">
    <p>def <span class="ident">mysqli_affected_rows</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_close">
    <p>def <span class="ident">mysqli_close</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_fetch_array">
    <p>def <span class="ident">mysqli_fetch_array</span>(</p><p>dbh, result_type=&#39;MYSQL_BOTH&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.mysql-fetch-array.php">https://php.net/manual/en/function.mysql-fetch-array.php</a></p>
<p>Orig params: <code>mysqli_fetch_array(result)</code>, replace with <code>(dbh)</code></p>
<p>Returns an array of strings that corresponds to the fetched row, or FALSE if
no more rows. The type of returned array depends on how <code>result_type</code> is
defined. By using <code>MYSQL_BOTH</code> (default), you'll get an array with both
associative and number indices =ODict for py.  Using <code>MYSQL_ASSOC</code>, you only
get associative indices (as <code>mysql_fetch_assoc()</code> works), using <code>MYSQL_NUM</code>,
you only get number indices (as <code>mysql_fetch_row()</code> works).</p>
<div class="codehilite"><pre><span></span>wp&gt; global $wpdb ; $dbh = $wpdb-&gt;dbh
wp&gt; $res = mysqli_query($dbh, &#39;select * from wp_users limit 3&#39;)
=&gt; object(mysqli_result)#864 (5) {
        [&quot;current_field&quot;]=&gt; 0, [&quot;field_count&quot;]=&gt; 12,
        [&quot;lengths&quot;]=&gt; NULL, [&quot;num_rows&quot;]=&gt; 2, [&quot;type&quot;]=&gt; 0, }
wp&gt; $modes_array = mysqli_fetch_array( $res )  #default to: &#39;MYSQL_BOTH&#39;
=&gt; array(24) { [0]    =&gt; str(1) &quot;4&quot;    ,
               [&quot;ID&quot;] =&gt; str(1) &quot;4&quot;    ,
               [1]    =&gt; str(9) &quot;zq...&quot;,
               [&quot;user_login&quot;]=&gt; str(9) &quot;zq...&quot;, ...... }
wp&gt; $a1 = mysqli_fetch_array( $res, MYSQL_NUM )
=&gt; array(12) { [0]=&gt; str(1) &quot;5&quot;
               [1]=&gt; str(7) &quot;aksylin&quot; }
wp&gt; $a2 = mysqli_fetch_array( $res, MYSQL_ASSOC )
=&gt; array(12) { [&quot;ID&quot;]=&gt; str(1) &quot;6&quot;
               [&quot;user_login&quot;]=&gt; str(9) &quot;anusnu888&quot;,... }
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_fetch_assoc">
    <p>def <span class="ident">mysqli_fetch_assoc</span>(</p><p>dbh)</p>
    </div>
    

    
  
    <div class="desc"><p>Orig params: <code>mysqli_fetch_assoc(result)</code>, replace with <code>(dbh)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_fetch_field">
    <p>def <span class="ident">mysqli_fetch_field</span>(</p><p>dbh, ColNum)</p>
    </div>
    

    
  
    <div class="desc"><p>Orig params: <code>mysqli_fetch_row(result)</code>, replace with <code>(dbh, ColNum)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_fetch_object">
    <p>def <span class="ident">mysqli_fetch_object</span>(</p><p>dbh, cls=&lt;class &#39;pyx.php.stdClass&#39;&gt;, params={})</p>
    </div>
    

    
  
    <div class="desc"><p>In Php, mysqli_fetch_object returns row by row.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_fetch_row">
    <p>def <span class="ident">mysqli_fetch_row</span>(</p><p>dbh)</p>
    </div>
    

    
  
    <div class="desc"><p>Orig params: <code>mysqli_fetch_row(result)</code>, replace with <code>(dbh)</code>.</p>
<p>Gets a result row as an enumerated array.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_free_result">
    <p>def <span class="ident">mysqli_free_result</span>(</p><p>dbh)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/mysqli-result.free.php">https://php.net/manual/en/mysqli-result.free.php</a></p>
<p>Frees the memory associated with the result. should always free result
with <code>mysqli_free_result()</code>, when your result object is not needed anymore</p>
<p>Orig params: <code>mysqli_free_result(result)</code>, replace with <code>(dbh)</code>.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_get_client_info">
    <p>def <span class="ident">mysqli_get_client_info</span>(</p><p>dbh=None)</p>
    </div>
    

    
  
    <div class="desc"><p>return mysqlnd</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_get_server_info">
    <p>def <span class="ident">mysqli_get_server_info</span>(</p><p>dbh)</p>
    </div>
    

    
  
    <div class="desc"><p>return
<code>"5.5.5-10.1.19-MariaDB-1~xenial"</code></p>
<div class="codehilite"><pre><span></span>wp&gt; mysqli_get_server_info ($wpdb-&gt;dbh);
=&gt; string(30) &quot;5.5.5-10.1.19-MariaDB-1~xenial&quot;
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_insert_id">
    <p>def <span class="ident">mysqli_insert_id</span>(</p><p>dbh)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_more_results">
    <p>def <span class="ident">mysqli_more_results</span>(</p><p>dbh)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/mysqli.more-results.php">https://php.net/manual/en/mysqli.more-results.php</a></p>
<p>Check if there are any more query results from a multi query.</p>
<p>Returns TRUE if one or more result sets are available from a previous call
to <code>mysqli_multi_query()</code>, otherwise FALSE.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_next_result">
    <p>def <span class="ident">mysqli_next_result</span>(</p><p>dbh)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/mysqli.next-result.php">https://php.net/manual/en/mysqli.next-result.php</a></p>
<p><code>mysqli_next_result</code> — Prepare next result from <code>multi_query</code>
Prepares next result set from a previous call to <code>mysqli_multi_query()</code>
which can be retrieved by <code>mysqli_store_result()</code> or <code>mysqli_use_result()</code>.
Returns TRUE on success or FALSE on failure.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_num_fields">
    <p>def <span class="ident">mysqli_num_fields</span>(</p><p>dbh)</p>
    </div>
    

    
  
    <div class="desc"><p>Orig params: <code>mysqli_num_fields(result)</code>, replace with <code>(dbh)</code>.</p>
<p>Gets the number of fields in a result.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_ping">
    <p>def <span class="ident">mysqli_ping</span>(</p><p>dbh, reconnect=False)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_query">
    <p>def <span class="ident">mysqli_query</span>(</p><p>dbh, query, Tries=3, Exit=&lt;built-in function exit&gt;)</p>
    </div>
    

    
  
    <div class="desc"><p>Try to execute SQL using <code>cursor().execute()</code> method for Tries # of times.
  After Tries # of times,</p>
<div class="codehilite"><pre><span></span>  :::python
  def mysqli_query(dbh, query, Tries=3, Exit=sys.exit):
    for Try in range(Tries):
      V(&#39;Try to execute query:&#39;, Try, query)
      try:
        return dbh.execute(query)
      except:
        xFn.PrintError(sys.exc_info(), Try)
      time.sleep(Try**2)

    Exit(&quot;
</pre></div>


<p>Cannot execute Sql after {} Tries!
".format(Tries))
        return False</p>
<p>Need to <code>dbconn.close()</code> later since our translation to Python does not
  use context manager as below:</p>
<div class="codehilite"><pre><span></span>  with dbconn.cursor() as cur:
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_real_escape_string">
    <p>def <span class="ident">mysqli_real_escape_string</span>(</p><p>dbh, Str)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/mysqli.real-escape-string.php">https://php.net/manual/en/mysqli.real-escape-string.php</a></p>
<p>Escapes special characters in a string for use in an SQL statement,
taking into account the current charset of the connection.</p>
<div class="codehilite"><pre><span></span>wp&gt; mysqli_real_escape_string( $wpdb-&gt;dbh, 123 );
=&gt; string(3) &quot;123&quot;
wp&gt; mysqli_real_escape_string( $wpdb-&gt;dbh, &#39;123&#39; );
=&gt; string(3) &quot;123&quot;
wp&gt; sprintf(&#39;%d&#39;, &#39;123&#39;);
=&gt; string(3) &quot;123&quot;
wp&gt; sprintf(&#39;%d&#39;, &#39;abc&#39;);
=&gt; string(1) &quot;0&quot;
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.mysqli_set_charset">
    <p>def <span class="ident">mysqli_set_charset</span>(</p><p>dbh, charset)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/mysqli.set-charset.php">https://php.net/manual/en/mysqli.set-charset.php</a></p>
<p>Returns TRUE on success or FALSE on failure.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.Next">
    <p>def <span class="ident">Next</span>(</p><p>var)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.NextLargestIntKey">
    <p>def <span class="ident">NextLargestIntKey</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns next numeric key in an array to increment its key, if numeric
keys are found.  Otherwise, returns next available num <code>key = 0</code>.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.number_format">
    <p>def <span class="ident">number_format</span>(</p><p>num, places=0)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.number-format.php">https://php.net/manual/function.number-format.php</a></p>
<p>Formats a number with grouped thousands.</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">locale</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_NUMERIC</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">number_format</span><span class="p">(</span><span class="mf">12345.6789</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="mi">12</span><span class="p">,</span><span class="mf">345.68</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.Object">
    <p>def <span class="ident">Object</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/language.types.object.php">https://php.net/manual/en/language.types.object.php</a></p>
<p>Convert array to object.  Equivalent to php: <code>(object) arr</code></p>
<p>If an object is converted to an object, it is not modified.</p>
<p>If a value of any other type is converted to an object, a new instance of
the stdClass built-in class is created. If the value was NULL, the new
instance will be empty. An array converts to an object with properties named
by keys and corresponding values, with the exception of numeric keys which
will be inaccessible unless iterated.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ObjToArrPy">
    <p>def <span class="ident">ObjToArrPy</span>(</p><p>Obj, Strict=True)</p>
    </div>
    

    
  
    <div class="desc"><p>Converts <code>stdClass()</code> object to array</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.parse_url">
    <p>def <span class="ident">parse_url</span>(</p><p>Url, component=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.parse-url.php">https://php.net/manual/en/function.parse-url.php</a></p>
<p><code>parse_url()</code> parses a URL and returns an associative array containing
any of the various components of the URL that are present.
The values of the array elements are not URL decoded.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ParseFlagFromPattern">
    <p>def <span class="ident">ParseFlagFromPattern</span>(</p><p>pattern, flags=0)</p>
    </div>
    

    
  
    <div class="desc"><p><code>re.I= 2, re.L=4, re.M=8, re.S=16, re.I|re.S=18, re.M|re.S|re.I=26</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.phpversion">
    <p>def <span class="ident">phpversion</span>(</p><p>)</p>
    </div>
    

    
  
    <div class="desc"><p><code>return '5.6.28'</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.preg_match">
    <p>def <span class="ident">preg_match</span>(</p><p>pattern, subject, flags=0)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.preg-match.php">https://php.net/manual/en/function.preg-match.php</a></p>
<p>Returns 1 if pattern matches given subject, 0 if not, or FALSE if error.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.preg_match_Result">
    <p>def <span class="ident">preg_match_Result</span>(</p><p>pattern, subject, flags=0)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.preg-match.php">https://php.net/manual/en/function.preg-match.php</a></p>
<p>Returns 1 if pattern matches given subject, 0 if not, or FALSE if error.</p>
<div class="codehilite"><pre><span></span>php&gt; preg_match(&#39;/(foo)(bar)(baz)/&#39;, &#39;foobarbaz&#39;, $matches);
=&gt; int(1)
php&gt; $matches;
=&gt; array(4) {
  [0]=&gt; string(9) &quot;foobarbaz&quot;
  [1]=&gt; string(3) &quot;foo&quot;
  [2]=&gt; string(3) &quot;bar&quot;
  [3]=&gt; string(3) &quot;baz&quot; }
php&gt; preg_match(&#39;/(fooz)(barz)(bazz)/&#39;, &#39;foobarbaz&#39;, $matches);
=&gt; int(0)
php&gt; $matches;
=&gt; array(0) { }
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.preg_match_tuple">
    <p>def <span class="ident">preg_match_tuple</span>(</p><p>pattern, subject, flags=0)</p>
    </div>
    

    
  
    <div class="desc"><p>Returns a tuple containing all the subgroups of the match, from 1 up to
however many groups are in the pattern.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.preg_quote">
    <p>def <span class="ident">preg_quote</span>(</p><p>Str, delimiter=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.preg-quote.php">https://php.net/manual/en/function.preg-quote.php</a></p>
<p><code>preg_quote()</code> takes Str and puts a <code>\</code> in front of every char that is part
of regex syntax. If delimiter is specified, it will be escaped.</p>
<p>The special regex chars are: <code>. \ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</code></p>
<p>Note: <code>/</code> is not a special regular expression character.</p>
<div class="codehilite"><pre><span></span>php&gt; $keywords = preg_quote(&#39;$40 for a g3/400&#39;, &#39;/&#39;);
php&gt; echo $keywords;
=&gt;  \$40 for a g3\/400  # same as py output below
</pre></div>


<p><a href="https://stackoverflow.com/questions/32419837/">Why re.escape escapes space</a></p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span>       <span class="s1">&#39;$40 for a g3/400&#39;</span><span class="p">)</span>
<span class="s1">&#39;\$40\ for\ a\ g3\/400&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span> <span class="s1">&#39;$40 for a g3/400&#39;</span><span class="p">))</span>
<span class="s1">&#39;\$40\ for\ a\ g3\/400&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">Php</span><span class="o">.</span><span class="n">preg_quote</span><span class="p">(</span><span class="s1">&#39;$40 for a g3/400&#39;</span><span class="p">,</span><span class="s1">&#39;/&#39;</span><span class="p">))</span>
<span class="s1">&#39;\$40 for a g3\/400&#39;</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.preg_replace">
    <p>def <span class="ident">preg_replace</span>(</p><p>pattern, replacement, subject, limit=-1, flags=0)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.preg-replace.php">https://php.net/manual/en/function.preg-replace.php</a></p>
<p>limit: The maximum possible replacements for each pattern in each subject
string. Defaults to -1 (no limit).</p>
<p>Returns an array if the subject parameter is an array, or a str otherwise.</p>
<p>If matches are found, the new subject will be returned, otherwise subject
will be returned unchanged or None if an error occurred.</p>
<div class="codehilite"><pre><span></span>php: replacement= &#39;$1&#39;
py:  r&#39;&#39; . r= raw str so no need to escape &#39;&#39;
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.prev">
    <p>def <span class="ident">prev</span>(</p><p>var)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.RecursiveCopyODict">
    <p>def <span class="ident">RecursiveCopyODict</span>(</p><p>od, Class=None, DeepCopy=False)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.reset">
    <p>def <span class="ident">reset</span>(</p><p>var)</p>
    </div>
    

    
  
    <div class="desc"><p>Rewinds array pointer to the first element, and
returns value of the first element.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.rtrim">
    <p>def <span class="ident">rtrim</span>(</p><p>Str, charlist=&#39; \t\n\r\x00\x0b&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.rtrim.php">https://php.net/manual/function.rtrim.php</a></p>
<p>Strip whitespace (or other characters) from the end of a string.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.serialize">
    <p>def <span class="ident">serialize</span>(</p><p>data)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.serialize.php">https://php.net/manual/en/function.serialize.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.shuffle">
    <p>def <span class="ident">shuffle</span>(</p><p>arr)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.shuffle.php">https://php.net/manual/function.shuffle.php</a></p>
<p>Shuffles (randomizes the order of the elements in) an array.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.so">
    <p>def <span class="ident">so</span>(</p><p>a, b)</p>
    </div>
    

    
  
    <div class="desc"><p><code>return strcmp(a['id'], b['id'])</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.sprintf">
    <p>def <span class="ident">sprintf</span>(</p><p>Format, *args)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.sprintf.php">https://php.net/manual/function.sprintf.php</a></p>
<p>Returns a string produced according to the formatting string format.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.sprintf_StringIO">
    <p>def <span class="ident">sprintf_StringIO</span>(</p><p>Format, *args)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://python.org/dev/peps/pep-0498/">PEP 498 Literal str Interpolation</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.static_vars">
    <p>def <span class="ident">static_vars</span>(</p><p>**kwargs)</p>
    </div>
    

    
  
    <div class="desc"><p>[py eq of static vars inside function](stackoverflow.com/questions/279561/</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.str_replace">
    <p>def <span class="ident">str_replace</span>(</p><p>Search, Replace, Subject)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.str-replace.php">https://php.net/manual/function.str-replace.php</a></p>
<p>If search and replace are arrays, <code>str_replace()</code> takes a value from each
array and uses them to search and replace on subject.
If replace has fewer values than search, an empty string is used for the
rest of replacement values.
If search is an array and replace is a string, this replacement string is
used for every value of search. The converse would not make sense, though.</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">vowels</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;o&quot;</span><span class="p">,</span> <span class="s2">&quot;u&quot;</span><span class="p">);</span> <span class="n">uv</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;E&quot;</span><span class="p">,</span> <span class="s2">&quot;I&quot;</span><span class="p">,</span> <span class="s2">&quot;O&quot;</span><span class="p">,</span> <span class="s2">&quot;U&quot;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">str_replace</span><span class="p">(</span><span class="n">vowels</span><span class="p">,</span> <span class="n">uv</span><span class="p">,</span> <span class="s2">&quot;Hello World of PHP&quot;</span><span class="p">)</span>
<span class="s1">&#39;HEllO WOrld Of PHP&#39;</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.str_split">
    <p>def <span class="ident">str_split</span>(</p><p>string, split_length)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.str-split.php">https://php.net/manual/function.str-split.php</a></p>
<p>DEPRECATED in PHP 5.3. Use <code>explode()</code> instead that works with delimiter char.
Should use <code>preg_split()</code> to split str with regex.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strcmp">
    <p>def <span class="ident">strcmp</span>(</p><p>Str1, Str2)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="http://php.net/manual/en/function.strcmp.php">http://php.net/manual/en/function.strcmp.php</a></p>
<p>Both params must be strings, the result is otherwise extremely unpredictable
returns -1 ou 1 if two strings are not identical, and 0 when they are,
except when comparing a str and an empty str "", it returns the str length.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strip_tags">
    <p>def <span class="ident">strip_tags</span>(</p><p>HTML)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.strip-tags.php">https://php.net/manual/en/function.strip-tags.php</a></p>
<p>If lxml is install, it will try to import and use it to strip all HTML tags.
This is the BEST, most-reliable and fastest method to strip HTML tags!!</p>
<p>If lxml is not installed, it will simpliy use regex:</p>
<div class="codehilite"><pre><span></span><span class="n">ReCompiled</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(&lt;!--.*?--&gt;|&lt;[^&gt;]*&gt;)&#39;</span><span class="p">)</span>
<span class="k">return</span> <span class="n">ReCompiled</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">HTML</span><span class="p">)</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.stripos">
    <p>def <span class="ident">stripos</span>(</p><p>haystack, needle, offset=0)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.stripos.php">https://php.net/manual/function.stripos.php</a></p>
<p>Find numeric position of the 1st occurrence of needle in the haystack str.
Unlike the <code>strpos()</code>, <code>stripos()</code> is case-insensitive.</p>
<div class="codehilite"><pre><span></span>php&gt; stripos(haystack, needle) !== FALSE
py&gt;  needle.lower() in haystack.lower()
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.stripslashes">
    <p>def <span class="ident">stripslashes</span>(</p><p>Str)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strlen">
    <p>def <span class="ident">strlen</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><code>return len(Str)</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strpos">
    <p>def <span class="ident">strpos</span>(</p><p>haystack, needle, offset=0)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.strpos.php">https://php.net/manual/function.strpos.php</a></p>
<p>Returns numeric position of 1st occurrence of needle in the haystack str.</p>
<div class="codehilite"><pre><span></span>php&gt; strpos(haystack, needle) !== FALSE    # is not False in py
py&gt;  needle in haystack
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strrev">
    <p>def <span class="ident">strrev</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.strrev.php">https://php.net/manual/function.strrev.php</a></p>
<p>Reverses Str.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strstr">
    <p>def <span class="ident">strstr</span>(</p><p>haystack, needle, before_needle=False)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.strstr.php">https://php.net/manual/function.strstr.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strtolower">
    <p>def <span class="ident">strtolower</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><code>wp&gt; strtolower( null ); #out=&gt; string(0) ""</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strtotime">
    <p>def <span class="ident">strtotime</span>(</p><p>Str, format_string=&#39;%Y-%m-%d %H:%M:%S&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.strtotime.php">https://php.net/manual/function.strtotime.php</a></p>
<p>format_string can also be: <code>"%m/%d/%Y %H:%M"</code>
Code below is not ideal. Can only use on date strings and cannot "+1 hour"
and have to specify the string format:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">strtotime</span><span class="p">(</span><span class="n">Str</span><span class="p">,</span> <span class="n">format_string</span> <span class="o">=</span> <span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1"> %H:%M:%S&#39;</span><span class="p">):</span>
  <span class="nb">tuple</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">Str</span><span class="p">,</span> <span class="n">format_string</span><span class="p">)</span>
  <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">mktime</span><span class="p">(</span><span class="nb">tuple</span><span class="p">))</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.strtoupper">
    <p>def <span class="ident">strtoupper</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><code>wp&gt; strtoupper( null ); #out=&gt; string(0) ""</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.substr">
    <p>def <span class="ident">substr</span>(</p><p>Str, start=0, length=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.substr.php">https://php.net/manual/function.substr.php</a></p>
<p>Returns the portion of string specified by the start and length params.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.switch">
    <p>def <span class="ident">switch</span>(</p><p>x, Dict, Default=&#39;&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>PHP <code>switch()</code> can be translated to Python by using the dictionary
<code>get(key[, default])</code> method:</p>
<div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">switch</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Default</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
  <span class="s1">&#39; Returns Default if x not found in Dict.keys() &#39;</span>
  <span class="k">return</span> <span class="n">Dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">Default</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Dict</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">switch</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">)</span>
</pre></div>


<p>However, it's still best to translate to <code>if, elif, elif,... , else</code>.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.trim">
    <p>def <span class="ident">trim</span>(</p><p>Str, charlist=&#39; \t\n\r\x00\x0b&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.trim.php">https://php.net/manual/en/function.trim.php</a></p>
<p>Returns a string with whitespace stripped from the beginning and end of str.
  Without the second parameter, <code>trim()</code> will strip these characters:</p>
<div class="codehilite"><pre><span></span>  &quot; &quot;    (ASCII 32 (0x20)), an ordinary space.
  &quot; &quot;   (ASCII  9 (0x09)), a tab.
  &quot;
</pre></div>


<p>"   (ASCII 10 (0x0A)), a new line (line feed).
      "
"   (ASCII 13 (0x0D)), a carriage return.
      " "   (ASCII  0 (0x00)), the NUL-byte.
      "" (ASCII 11 (0x0B)), a vertical tab.</p>
<p><a href="https://docs.python.org/3.6/library/stdtypes.html#str.strip">https://docs.python.org/3.6/library/stdtypes.html#str.strip</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.uasort">
    <p>def <span class="ident">uasort</span>(</p><p>arr, keyfunc)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.uasort.php">https://php.net/manual/en/function.uasort.php</a></p>
<p>Sort an array with user-defined comparison func &amp; maintain index association
array indices maintain their correlation with the array elements they are
associated with, using a user-defined comparison function.</p>
<p>Difference between uasort() and usort(), the missing example ...</p>
<div class="codehilite"><pre><span></span><span class="x">php&gt; $arr= array( 10=&gt;array(&#39;id&#39;=&gt;&#39;dix&#39;, &#39;aa&#39;=&gt;&#39;1010&#39;),</span>
<span class="x">                 100=&gt;array(&#39;id&#39;=&gt;&#39;cent&#39;,&#39;aa&#39;=&gt;&#39;100100&#39;),</span>
<span class="x">                   2=&gt;array(&#39;id&#39;=&gt;&#39;deux&#39;,&#39;aa&#39;=&gt;&#39;22&#39;),</span>
<span class="x">                   7=&gt;array(&#39;id&#39;=&gt;&#39;sept&#39;,&#39;aa&#39;=&gt;&#39;77&#39;));</span>
<span class="x"># sort id</span>
<span class="x">php&gt; function so($a, $b) { return (strcmp ($a[&#39;id&#39;],$b[&#39;id&#39;])); }</span>
<span class="x">php&gt; uasort($arr, &#39;so&#39;)</span>
<span class="x">=&gt; bool(true)</span>
<span class="x">php&gt; $arr</span>
<span class="x">=&gt; array(4) {</span>
<span class="x">  [100]=&gt; array(2) {</span>
<span class="x">    [&quot;id&quot;]=&gt; string(4) &quot;cent&quot;</span>
<span class="x">    [&quot;aa&quot;]=&gt; string(6) &quot;100100&quot; }</span>
<span class="x">  [2]=&gt; array(2) {</span>
<span class="x">    [&quot;id&quot;]=&gt; string(4) &quot;deux&quot;</span>
<span class="x">    [&quot;aa&quot;]=&gt; string(2) &quot;22&quot; }</span>
<span class="x">  [10]=&gt; array(2) {</span>
<span class="x">    [&quot;id&quot;]=&gt; string(3) &quot;dix&quot;</span>
<span class="x">    [&quot;aa&quot;]=&gt; string(4) &quot;1010&quot; }</span>
<span class="x">  [7]=&gt; array(2) {</span>
<span class="x">    [&quot;id&quot;]=&gt; string(4) &quot;sept&quot;</span>
<span class="x">    [&quot;aa&quot;]=&gt; string(2) &quot;77&quot; }</span>
<span class="x">}</span>
<span class="x">php&gt; usort($arr, &#39;so&#39;)</span>
<span class="x">=&gt; bool(true)</span>
<span class="x">php&gt; $arr</span>
<span class="x">=&gt; array(4) {</span>
<span class="x">  [0]=&gt; array(2) {</span>
<span class="x">    [&quot;id&quot;]=&gt; string(4) &quot;cent&quot;</span>
<span class="x">    [&quot;aa&quot;]=&gt; string(6) &quot;100100&quot; }</span>
<span class="x">  [1]=&gt; array(2) {</span>
<span class="x">    [&quot;id&quot;]=&gt; string(4) &quot;deux&quot;</span>
<span class="x">    [&quot;aa&quot;]=&gt; string(2) &quot;22&quot; }</span>
<span class="x">  [2]=&gt; array(2) {</span>
<span class="x">    [&quot;id&quot;]=&gt; string(3) &quot;dix&quot;</span>
<span class="x">    [&quot;aa&quot;]=&gt; string(4) &quot;1010&quot; }</span>
<span class="x">  [3]=&gt; array(2) {</span>
<span class="x">    [&quot;id&quot;]=&gt; string(4) &quot;sept&quot;</span>
<span class="x">    [&quot;aa&quot;]=&gt; string(2) &quot;77&quot; }</span>
<span class="x">}</span>
</pre></div>


<p>Python:</p>
<div class="codehilite"><pre><span></span><span class="n">py</span><span class="o">&gt;</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">array</span><span class="p">((</span> <span class="mi">10</span><span class="p">,</span><span class="n">array</span><span class="p">((</span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="s1">&#39;dix&#39;</span> <span class="p">),(</span><span class="s1">&#39;aa&#39;</span><span class="p">,</span><span class="s1">&#39;1010&#39;</span>  <span class="p">))),</span>
                <span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="n">array</span><span class="p">((</span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="s1">&#39;cent&#39;</span><span class="p">),(</span><span class="s1">&#39;aa&#39;</span><span class="p">,</span><span class="s1">&#39;100100&#39;</span><span class="p">))),</span>
                <span class="p">(</span>  <span class="mi">2</span><span class="p">,</span><span class="n">array</span><span class="p">((</span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="s1">&#39;deux&#39;</span><span class="p">),(</span><span class="s1">&#39;aa&#39;</span><span class="p">,</span><span class="s1">&#39;22&#39;</span>    <span class="p">))),</span>
                <span class="p">(</span>  <span class="mi">7</span><span class="p">,</span><span class="n">array</span><span class="p">((</span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="s1">&#39;sept&#39;</span><span class="p">),(</span><span class="s1">&#39;aa&#39;</span><span class="p">,</span><span class="s1">&#39;77&#39;</span>    <span class="p">))),)</span>
<span class="n">py</span><span class="o">&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">usort</span><span class="p">(</span> <span class="n">arr</span><span class="p">,</span> <span class="n">Php</span><span class="o">.</span><span class="n">so</span><span class="p">)</span>
<span class="n">py</span><span class="o">&gt;</span> <span class="n">Php</span><span class="o">.</span><span class="n">uasort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">Php</span><span class="o">.</span><span class="n">so</span><span class="p">)</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ucfirst">
    <p>def <span class="ident">ucfirst</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.ucfirst.php">https://php.net/manual/function.ucfirst.php</a></p>
<p>Makes a string's first character uppercase.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ucwords">
    <p>def <span class="ident">ucwords</span>(</p><p>source)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.ucwords.php">https://php.net/manual/function.ucwords.php</a></p>
<p>Uppercase the first character of each word in a string.</p>
<div class="codehilite"><pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">ucwords</span><span class="p">(</span><span class="s2">&quot;Michael o&#39;keefe&quot;</span><span class="p">)</span>
<span class="s2">&quot;Michael O&#39;keefe&quot;</span>
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.ucwords_py">
    <p>def <span class="ident">ucwords_py</span>(</p><p>Str)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.unserialize">
    <p>def <span class="ident">unserialize</span>(</p><p>data)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.unserialize.php">https://php.net/manual/en/function.unserialize.php</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.unset">
    <p>def <span class="ident">unset</span>(</p><p>var, attr=None)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.unset.php">https://php.net/manual/en/function.unset.php</a>
Destroys var, or var.attr:</p>
<div class="codehilite"><pre><span></span>php&gt; unset( $this-&gt;data-&gt;$key );
py&gt;  delattr( this.data, key )
php&gt; unset( self::$back_compat_keys[ $key ] );
py&gt;  Php.unset( getattr(self, back_compat_keys)[ key ] )
</pre></div>


<p>Since Php doesn't raise error for deleting absent key or if attr doesn't
exist, so py error exception is to: <code>print("Cannot unset: var={}, attr={}".</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.urldecode">
    <p>def <span class="ident">urldecode</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/function.urldecode.php">https://php.net/manual/function.urldecode.php</a></p>
<p><a href="https://stackoverflow.com/questions/16566069/">Url decode UTF-8 in Python</a></p>
<div class="codehilite"><pre><span></span>php &gt; var_dump( urldecode(&#39;are=green+and+red&#39;) );
string(17) &quot;are=green and red&quot;
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.urlencode">
    <p>def <span class="ident">urlencode</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p>urlencode different from
WiF.utf8_uri_encode:</p>
<div class="codehilite"><pre><span></span>php&gt; utf8_uri_encode( &quot;EFI收购Cr&quot; );
=&gt; string(31) &quot;EFI%e6%94%b6%e8%b4%adCr&quot;
php&gt; urlencode( &quot;EFI收购Cr&quot; );
=&gt; string(23) &quot;EFI%E6%94%B6%E8%B4%ADCr&quot;
</pre></div></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.UrlEncodedHexToLowercase">
    <p>def <span class="ident">UrlEncodedHexToLowercase</span>(</p><p>Str)</p>
    </div>
    

    
  
    <div class="desc"><p><code>'%2FEl+Ni%C3%B1o%2F' =&gt; '/El+Ni%c3%b1o/'</code></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.usort">
    <p>def <span class="ident">usort</span>(</p><p>arr, keyfunc)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.usort.php">https://php.net/manual/en/function.usort.php</a></p>
<p>Sorts an array by its values using a user-supplied comparison function.</p>
<p>If 2 members compare as equal, their relative order in the sorted array is
undefined. This func assigns new keys to elements in array. It removes any
existing keys that may have been assigned, rather than reordering the keys.</p>
<p>See <a href="php.htm#pyx.php.uasort">Difference between uasort() and usort(), the missing example ...
</a></p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.usort1">
    <p>def <span class="ident">usort1</span>(</p><p>arr, keyfunc)</p>
    </div>
    

    
  
    <div class="desc"><p>same as usort()</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.usort2">
    <p>def <span class="ident">usort2</span>(</p><p>arr, keyfunc)</p>
    </div>
    

    
  
    <div class="desc"><p>same as usort()</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.V">
    <p>def <span class="ident">V</span>(</p><p>*args)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.var_dump">
    <p>def <span class="ident">var_dump</span>(</p><p>*obs)</p>
    </div>
    

    
  
    <div class="desc"><p>Equivalent to PHP's <code>var_dump()</code>.
Displays type, value etc structured info of py object, list, tuple, dict, etc.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.var_export">
    <p>def <span class="ident">var_export</span>(</p><p>*obs)</p>
    </div>
    

    
  
    <div class="desc"><p>Same as <code>var_dump()</code>, but returns output as a string.</p></div>
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.version_compare">
    <p>def <span class="ident">version_compare</span>(</p><p>v1, v2, op=None)</p>
    </div>
    

    
  
  <div class="source_cont">
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="pyx.php.vsprintf">
    <p>def <span class="ident">vsprintf</span>(</p><p>Format, args)</p>
    </div>
    

    
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.vsprintf.php">https://php.net/manual/en/function.vsprintf.php</a></p>
<p>Operates as <code>sprintf()</code> but accepts an array of arguments, rather than a
variable number of arguments.</p></div>
  <div class="source_cont">
</div>

  </div>
  

    <h2 class="section-title" id="header-variables">Module variables</h2>
      <div class="item">
      <p id="pyx.php.AllDataTypes" class="name">var <span class="ident">AllDataTypes</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.CASE_LOWER" class="name">var <span class="ident">CASE_LOWER</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.CASE_UPPER" class="name">var <span class="ident">CASE_UPPER</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.CharMask" class="name">var <span class="ident">CharMask</span></p>
      
  
    <div class="desc"><p><code>CharMask = "  
 "</code></p></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.FreeRegLicenseArraysLimit" class="name">var <span class="ident">FreeRegLicenseArraysLimit</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.IterTypes" class="name">var <span class="ident">IterTypes</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.MappingTypes" class="name">var <span class="ident">MappingTypes</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.mysqlnd" class="name">var <span class="ident">mysqlnd</span></p>
      
  
    <div class="desc"><p>= "mysqlnd 5.0.11-dev - 20120503 - $Id: 76b08b24596e12d4553bd41fc93cccd5bac2fe7a $"</p></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.NumericTypes" class="name">var <span class="ident">NumericTypes</span></p>
      
  
    <div class="desc"><p>= (int, float, complex,)</p></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_URL_FRAGMENT" class="name">var <span class="ident">PHP_URL_FRAGMENT</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_URL_HOST" class="name">var <span class="ident">PHP_URL_HOST</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_URL_PASS" class="name">var <span class="ident">PHP_URL_PASS</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_URL_PATH" class="name">var <span class="ident">PHP_URL_PATH</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_URL_PORT" class="name">var <span class="ident">PHP_URL_PORT</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_URL_QUERY" class="name">var <span class="ident">PHP_URL_QUERY</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_URL_SCHEME" class="name">var <span class="ident">PHP_URL_SCHEME</span></p>
      
  
    <div class="desc"><p><a href="https://php.net/manual/en/function.parse-url.php">https://php.net/manual/en/function.parse-url.php</a> </p>
<p>Defines only available in PHP 5, created for PHP4.</p>
<div class="codehilite"><pre><span></span>PHP_URL_SCHEME  = 1
PHP_URL_PORT    = 3
PHP_URL_USER    = 4
PHP_URL_PASS    = 5
PHP_URL_PATH    = 6
PHP_URL_QUERY   = 7
PHP_URL_FRAGMENT= 8
</pre></div></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_URL_USER" class="name">var <span class="ident">PHP_URL_USER</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.PHP_VERSION" class="name">var <span class="ident">PHP_VERSION</span></p>
      
  
    <div class="desc"><p><code>= '5.6.31-4+ubuntu16.04.1+deb.sury.org+4'</code></p></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.ScalarTypes" class="name">var <span class="ident">ScalarTypes</span></p>
      
  
    <div class="desc"><p>= (bool, str, bytes, int, float, complex,)</p></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.SeqSetTypes" class="name">var <span class="ident">SeqSetTypes</span></p>
      
  
    <div class="desc"><p>= (list, tuple, range, set, frozenset,)</p></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.SeqTypes" class="name">var <span class="ident">SeqTypes</span></p>
      
  
    <div class="desc"><p>= (list, tuple, range,)</p></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.SetTypes" class="name">var <span class="ident">SetTypes</span></p>
      
  
    <div class="desc"><p>= (set, frozenset,)</p></div>
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.TAB_SIZE" class="name">var <span class="ident">TAB_SIZE</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.UnRegLicenseArraysLimit" class="name">var <span class="ident">UnRegLicenseArraysLimit</span></p>
      
  
  <div class="source_cont">
</div>

      </div>
      <div class="item">
      <p id="pyx.php.whitespace" class="name">var <span class="ident">whitespace</span></p>
      
  
  <div class="source_cont">
</div>

      </div>

  </section>

    </article>
  <div class="clear"> </div>
  <footer id="footer">
    <p>
      <a href="https://wordpy.com/">WordPy</a>
      <a href="https://wordpy.com/pyx/php/">pyx.php</a> Module Documentation
    </p>

    <p>pyx.php <a href="https://wordpy.com/pyx/php.license.txt">LICENSE</a></p>

    <p>Written by:<a href="https://vic.tech">Vic Tong</a></p>
  </footer>
</div>
</body>
</html>